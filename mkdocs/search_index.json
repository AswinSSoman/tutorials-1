{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome!\n\n\nABRPI training materials\n\n\nAntibiotic Resistant Pathogens Initiative\n\n\nThis site contains tutorials for using the\n\nMicrobial Genomics Virtual Lab\n to perform bioinformatics\ntasks on bacterial \nomics\n data, either on the Unix command line or using\nthe \nGalaxy\n system.\n\n\nTutorials on assembly, annotation and variant calling can be found under the \nMicrobial Genomics\n tab in the top panel.\n\n\n\n\n\nTutorials on examining differential gene expression can be found under \nMicrobial Transcriptomics\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "", 
            "title": "Welcome!"
        }, 
        {
            "location": "/#abrpi-training-materials", 
            "text": "", 
            "title": "ABRPI training materials"
        }, 
        {
            "location": "/#antibiotic-resistant-pathogens-initiative", 
            "text": "This site contains tutorials for using the Microbial Genomics Virtual Lab  to perform bioinformatics\ntasks on bacterial  omics  data, either on the Unix command line or using\nthe  Galaxy  system.  Tutorials on assembly, annotation and variant calling can be found under the  Microbial Genomics  tab in the top panel.   Tutorials on examining differential gene expression can be found under  Microbial Transcriptomics .", 
            "title": "Antibiotic Resistant Pathogens Initiative"
        }, 
        {
            "location": "/modules/galaxy/", 
            "text": "Get Data into Galaxy\n\n\nGalaxy Background\n\n\nGalaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.\n\n\nGalaxy is an open, web-based platform. Details about the project can be found \nhere\n.\n\n\nThe Galaxy interface is separated into three parts. The \nTools\n list on the left, the \nViewing\n panel in the middle and the analysis and data \nHistory\n on the right.\n\n\n\n\nRegister in Galaxy\n\n\nOpen a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari.\n\n\nIn the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL.\n\n\n\n\nClick on \nUser\n button on the right.\n\n\n\n\n\n\nSelect: \nUser \n Register\n\n\nEnter your email, choose a password, and choose a user name.\n\n\nClick \nSubmit\n\n\n\n\nImport a history\n\n\n\n\nIn the menu options across the top, go to \nShared Data\n.\n\n\nClick on \nHistories\n.\n\n\n\n\n\n\n\n\nA list of published histories should appear. Click on the history that you want to use.\n\n\nClick on \nImport history\n.\n\n\n\n\nAn option will appear to re-name the history. We don\nt need to rename it, so click \nImport\n.\n\n\n\n\n\n\nThe history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses.\n\n\n\n\n\n\nOther ways to import data into Galaxy\n\n\n\n\nUpload a file from your computer\n\n\nCopy a link to a Galaxy history\n\n\nFor sample training data files to use, see the \nnext section.", 
            "title": "Starting with Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#get-data-into-galaxy", 
            "text": "", 
            "title": "Get Data into Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#galaxy-background", 
            "text": "Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.  Galaxy is an open, web-based platform. Details about the project can be found  here .  The Galaxy interface is separated into three parts. The  Tools  list on the left, the  Viewing  panel in the middle and the analysis and data  History  on the right.", 
            "title": "Galaxy Background"
        }, 
        {
            "location": "/modules/galaxy/#register-in-galaxy", 
            "text": "Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari.  In the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL.   Click on  User  button on the right.    Select:  User   Register  Enter your email, choose a password, and choose a user name.  Click  Submit", 
            "title": "Register in Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#import-a-history", 
            "text": "In the menu options across the top, go to  Shared Data .  Click on  Histories .     A list of published histories should appear. Click on the history that you want to use.  Click on  Import history .   An option will appear to re-name the history. We don t need to rename it, so click  Import .    The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses.", 
            "title": "Import a history"
        }, 
        {
            "location": "/modules/galaxy/#other-ways-to-import-data-into-galaxy", 
            "text": "Upload a file from your computer  Copy a link to a Galaxy history  For sample training data files to use, see the  next section.", 
            "title": "Other ways to import data into Galaxy"
        }, 
        {
            "location": "/modules/data-dna/", 
            "text": "Dataset\n\n\nThis page contains data for the tutorials.\n\n\nIndividual input files\n\n\nWildtype reference\n\n\n\n\nwildtype.fna\n\n\nwildtype.gbk\n\n\nwildtype.gff\n\n\n\n\nMutant Illumina sequence\n\n\n\n\nmutant_R1.fastq.gz\n\n\nmutant_R2.fastq.gz\n\n\n\n\nAssembled contigs\n\n\n\n\nSPAdes_contigs.fasta\n\n\n\n\nUpload to Galaxy\n\n\n\n\nDownload required file(s) to your computer.\n\n\nFrom the Galaxy tool panel, click on \nGet Data \n Upload File\n  \n\n\nClick the \nChoose local file\n button  \n\n\nFind and select the \nfile\n you downloaded and click \nOpen\n  \n\n\nSet the \nType\n correctly.  \n\n\nClick the \nStart\n button.  \n\n\nOnce the progress bar reaches 100%, click the \nClose\n button  \n\n\nThe file will now upload to your current history.\n\n\n\n\nGalaxy histories\n\n\n\n\nGalaxy history of input files\n\n\nGalaxy history: FastQC\n\n\nGalaxy history: Spades\n\n\nGalaxy history: Prokka\n\n\nGalaxy history: Snippy\n\n\n\n\nTo get the saved tutorial history (a set of files) into Galaxy:\n\n\n\n\nRight-click on \nGalaxy history of input files\n above and copy link address.\n\n\nGo to your Galaxy instance. Make sure you are registered and logged in. Refresh the page.\n\n\nClick on the \nHistory\n cog \n\n\nSelect \nImport from File\n\n\n\n\n\n\n\n\nIn the box called \nArchived History URL\n, paste in the link address to the Galaxy history.\n\n\nClick \nSubmit\n\n\nWait a few seconds.\n\n\nClick on the \nview all histories\n button \n\n\nSee if the Galaxy history has been imported: it will be called \nimported from archive: Data\n\n\nAbove that pane, click on the \nSwitch to\n button.\n\n\nThen click \nDone\n (in the top left corner).\n\n\nYou should now have a list of five files in your current history.", 
            "title": "Training dataset"
        }, 
        {
            "location": "/modules/data-dna/#dataset", 
            "text": "This page contains data for the tutorials.", 
            "title": "Dataset"
        }, 
        {
            "location": "/modules/data-dna/#individual-input-files", 
            "text": "", 
            "title": "Individual input files"
        }, 
        {
            "location": "/modules/data-dna/#wildtype-reference", 
            "text": "wildtype.fna  wildtype.gbk  wildtype.gff", 
            "title": "Wildtype reference"
        }, 
        {
            "location": "/modules/data-dna/#mutant-illumina-sequence", 
            "text": "mutant_R1.fastq.gz  mutant_R2.fastq.gz", 
            "title": "Mutant Illumina sequence"
        }, 
        {
            "location": "/modules/data-dna/#assembled-contigs", 
            "text": "SPAdes_contigs.fasta", 
            "title": "Assembled contigs"
        }, 
        {
            "location": "/modules/data-dna/#upload-to-galaxy", 
            "text": "Download required file(s) to your computer.  From the Galaxy tool panel, click on  Get Data   Upload File     Click the  Choose local file  button    Find and select the  file  you downloaded and click  Open     Set the  Type  correctly.    Click the  Start  button.    Once the progress bar reaches 100%, click the  Close  button    The file will now upload to your current history.", 
            "title": "Upload to Galaxy"
        }, 
        {
            "location": "/modules/data-dna/#galaxy-histories", 
            "text": "Galaxy history of input files  Galaxy history: FastQC  Galaxy history: Spades  Galaxy history: Prokka  Galaxy history: Snippy   To get the saved tutorial history (a set of files) into Galaxy:   Right-click on  Galaxy history of input files  above and copy link address.  Go to your Galaxy instance. Make sure you are registered and logged in. Refresh the page.  Click on the  History  cog   Select  Import from File     In the box called  Archived History URL , paste in the link address to the Galaxy history.  Click  Submit  Wait a few seconds.  Click on the  view all histories  button   See if the Galaxy history has been imported: it will be called  imported from archive: Data  Above that pane, click on the  Switch to  button.  Then click  Done  (in the top left corner).  You should now have a list of five files in your current history.", 
            "title": "Galaxy histories"
        }, 
        {
            "location": "/modules/velvet/", 
            "text": "Assembly using Velvet\n\n\nBackground\n\n\nVelvet is one of a number of \nde novo\n assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this \nlink\n.\n\n\n\n\n\nIn this activity, we will perform a \nde novo\n assembly of a short read set using the Velvet assembler.\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nassemble the reads using Velvet, and\n\n\nexamine the output assembly.\n\n\n\n\nImport and view data\n\n\n\n\n\nIf you don\nt already have the files in your current galaxy history, see \nhere\n for information on how to get them.\n\n\n\n\nThe read set for today is from an imaginary \nStaphylococcus aureus\n bacterium with a miniature genome.\n\n\n\n\nThe whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.\n\n\n\n\n\n\nThe files we need for assembly are the \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\n\n\n\n\n(We don\nt need the reference genome sequences for this tutorial).\n\n\n\n\n\n\nThe reads are paired-end.\n\n\n\n\n\n\nEach read is 150 bases long. \n\n\n\n\n\n\nThe number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button (the \n) next to one of the FASTQ sequence files.\n\n\n\n\n\n\n\nAssemble reads with Velvet\n\n\n\n\nWe will perform a \nde novo\n assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)\n\n\nVelvet requires the user to input a value of \nk\n for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity.\n\n\n\n\n\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Assembly \n velvet\n\n\n\n\nSet the following parameters (leave other settings as they are):\n\n\n\n\nK-mer\n: choose a value for k between 21 and 95\n\n\nInput file type\n: Fastq\n\n\nSingle or paired end reads\n: Paired\n\n\n Select first set of reads\n: \nmutant_R1.fastq\n  \n\n\n Select second set of reads\n: \nmutant_R2.fastq\n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\nExamine the output\n\n\n\n\nGalaxy is now running velvet on the reads for you.\n\n\nPress the refresh button in the history pane to see if it has finished.\n\n\n\n\nWhen it is finished, you will have three new files in your history.  \n\n\n\n\na \nContigs\n file\n\n\na \nContigs stats\n file\n\n\nthe velvet \nlog\n file\n\n\n\n\n\n\n\n\nClick on the View Data button \n on each of the files.\n\n\n\n\n\n\nThe \nContigs\n file will show each contig with the \nk-mer length\n and \nk-mer coverage\n listed as part of the header (however, these are just called \nlength\n and \ncoverage\n).\n\n\n\n\nK-mer length\n: For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length.\n\n\nK-mer coverage\n: For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly).\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nContigs stats\n file will show a list of these k-mer lengths and k-mer coverages.\n\n\n\n\n\n\n\n\nWe will summarise the information in the \nlog\n file.\n\n\nGo to \nBasic Tools \n NGS Common Toolsets \n FASTA manipulation \n Fasta statistics\n\n\nFor the required input file, choose the velvet \nContigs\n file.\n\n\nClick \nExecute\n.\n\n\nA new file will appear called \nFasta summary stats\n\n\nClick the eye icon to look at this file.\n\n\n\n\n\n\n\n\nLook at:\n\n\nnum_seq\n: the number of contigs in the FASTA file.\n\n\nnum_bp\n: the number of assembled bases. Roughly proportional to genome size.\n\n\nlen_max\n: the biggest contig.  \n\n\nlen_N50\n: N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger.", 
            "title": "Genome assembly with Velvet"
        }, 
        {
            "location": "/modules/velvet/#assembly-using-velvet", 
            "text": "", 
            "title": "Assembly using Velvet"
        }, 
        {
            "location": "/modules/velvet/#background", 
            "text": "Velvet is one of a number of  de novo  assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this  link .   In this activity, we will perform a  de novo  assembly of a short read set using the Velvet assembler.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/velvet/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   assemble the reads using Velvet, and  examine the output assembly.", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/velvet/#import-and-view-data", 
            "text": "If you don t already have the files in your current galaxy history, see  here  for information on how to get them.   The read set for today is from an imaginary  Staphylococcus aureus  bacterium with a miniature genome.   The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.    The files we need for assembly are the  mutant_R1.fastq  and  mutant_R2.fastq .    (We don t need the reference genome sequences for this tutorial).    The reads are paired-end.    Each read is 150 bases long.     The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).      Click on the View Data button (the  ) next to one of the FASTQ sequence files.", 
            "title": "Import and view data"
        }, 
        {
            "location": "/modules/velvet/#assemble-reads-with-velvet", 
            "text": "We will perform a  de novo  assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)  Velvet requires the user to input a value of  k  for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity.     Go to  Tools   NGS Analysis   NGS: Assembly   velvet   Set the following parameters (leave other settings as they are):   K-mer : choose a value for k between 21 and 95  Input file type : Fastq  Single or paired end reads : Paired   Select first set of reads :  mutant_R1.fastq      Select second set of reads :  mutant_R2.fastq     Your tool interface should look like this:      Click  Execute", 
            "title": "Assemble reads with Velvet"
        }, 
        {
            "location": "/modules/velvet/#examine-the-output", 
            "text": "Galaxy is now running velvet on the reads for you.  Press the refresh button in the history pane to see if it has finished.   When it is finished, you will have three new files in your history.     a  Contigs  file  a  Contigs stats  file  the velvet  log  file     Click on the View Data button   on each of the files.    The  Contigs  file will show each contig with the  k-mer length  and  k-mer coverage  listed as part of the header (however, these are just called  length  and  coverage ).   K-mer length : For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length.  K-mer coverage : For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly).       The  Contigs stats  file will show a list of these k-mer lengths and k-mer coverages.     We will summarise the information in the  log  file.  Go to  Basic Tools   NGS Common Toolsets   FASTA manipulation   Fasta statistics  For the required input file, choose the velvet  Contigs  file.  Click  Execute .  A new file will appear called  Fasta summary stats  Click the eye icon to look at this file.     Look at:  num_seq : the number of contigs in the FASTA file.  num_bp : the number of assembled bases. Roughly proportional to genome size.  len_max : the biggest contig.    len_N50 : N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/spades/", 
            "text": "Assembly using Spades\n\n\nBackground\n\n\nSpades is one of a number of \nde novo\n assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this \nlink\n.\n\n\n\n\n\nIn this activity, we will perform a \nde novo\n assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence.\n\n\n\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\n\n\n\nassemble the reads using Spades, and\n\n\nexamine the output assembly.\n\n\n\n\n\n\n\nImport and view data\n\n\n\n\n\nIf you don\nt already have the files in your current galaxy history, see \nhere\n for information on how to get them.\n\n\n\n\nThe read set for today is from an imaginary \nStaphylococcus aureus\n bacterium with a miniature genome.\n\n\n\n\nThe whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.\n\n\n\n\n\n\nThe files we need for assembly are the \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\n\n\n\n\n(We don\nt need the reference genome sequences for this tutorial).\n\n\n\n\n\n\nThe reads are paired-end.\n\n\n\n\n\n\nEach read is 150 bases long. \n\n\n\n\n\n\nThe number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button (the \n) next to one of the FASTQ sequence files.\n\n\n\n\n\n\n\nAssemble reads with Spades\n\n\n\n\nWe will perform a \nde novo\n assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)\n\n\n\n\n\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Assembly \n spades\n\n\n\n\nSet the following parameters (leave other settings as they are):\n\n\n\n\nRun only Assembly\n: \nYes\n [the \nYes\n button should be darker grey]\n\n\nKmers to use separated by commas:\n \n33,55,91\n  [note: no spaces]  \n\n\nCoverage cutoff:\n \nauto\n  \n\n\nFiles \n Forward reads:\n \nmutant_R1.fastq\n  \n\n\nFiles \n Reverse reads:\n \nmutant_R2.fastq\n  \n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\nExamine the output\n\n\n\n\nGalaxy is now running Spades on the reads for you.\n\n\n\n\nWhen it is finished, you will have five new files in your history.  \n\n\n\n\ntwo FASTA files of the resulting contigs and scaffolds\n\n\ntwo files for statistics about these\n\n\nthe Spades logfile\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button \n on each of the files.\n\n\nNote that the short reads have been assembled into much longer contigs.\n\n\n(However, in this case, the contigs have not been assembled into larger scaffolds.)\n\n\nThe stats files will give you the length of each of the contigs.", 
            "title": "Genome assembly with Spades"
        }, 
        {
            "location": "/modules/spades/#assembly-using-spades", 
            "text": "", 
            "title": "Assembly using Spades"
        }, 
        {
            "location": "/modules/spades/#background", 
            "text": "Spades is one of a number of  de novo  assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this  link .   In this activity, we will perform a  de novo  assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/spades/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:    assemble the reads using Spades, and  examine the output assembly.", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/spades/#import-and-view-data", 
            "text": "If you don t already have the files in your current galaxy history, see  here  for information on how to get them.   The read set for today is from an imaginary  Staphylococcus aureus  bacterium with a miniature genome.   The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.    The files we need for assembly are the  mutant_R1.fastq  and  mutant_R2.fastq .    (We don t need the reference genome sequences for this tutorial).    The reads are paired-end.    Each read is 150 bases long.     The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).      Click on the View Data button (the  ) next to one of the FASTQ sequence files.", 
            "title": "Import and view data"
        }, 
        {
            "location": "/modules/spades/#assemble-reads-with-spades", 
            "text": "We will perform a  de novo  assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)     Go to  Tools   NGS Analysis   NGS: Assembly   spades   Set the following parameters (leave other settings as they are):   Run only Assembly :  Yes  [the  Yes  button should be darker grey]  Kmers to use separated by commas:   33,55,91   [note: no spaces]    Coverage cutoff:   auto     Files   Forward reads:   mutant_R1.fastq     Files   Reverse reads:   mutant_R2.fastq        Your tool interface should look like this:      Click  Execute", 
            "title": "Assemble reads with Spades"
        }, 
        {
            "location": "/modules/spades/#examine-the-output", 
            "text": "Galaxy is now running Spades on the reads for you.   When it is finished, you will have five new files in your history.     two FASTA files of the resulting contigs and scaffolds  two files for statistics about these  the Spades logfile       Click on the View Data button   on each of the files.  Note that the short reads have been assembled into much longer contigs.  (However, in this case, the contigs have not been assembled into larger scaffolds.)  The stats files will give you the length of each of the contigs.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/prokka/", 
            "text": "Genome annotation using Prokka\n\n\nBackground\n\n\nIn this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous \ntutorial\n. Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.\n\n\nProkka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using \nProdigal\n; second, the \nfunction\n of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found \nhere\n.\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nload a genome assembly into Prokka\n\n\nannotate the assembly using Prokka\n\n\nexamine the annotated genome using JBrowse\n\n\n\n\nInput data\n\n\nProkka requires assembled contigs.\n\n\n\n\n\n\nIf you are continuing on from the previous workshop (\nAssembly with Spades\n), this file will be in your current history: \nSPAdes_contigs.fasta\n.\n\n\n\n\n\n\nAlternatively, download the assembled contigs from the \nTraining dataset page.\n\n\n\n\n\n\n\n\n\nRun Prokka\n\n\n\n\nIn Galaxy, go to \nTools \n NGS Analysis \n NGS: Annotation \n Prokka\n  \n\n\nSet the following parameters (leave everything else unchanged):\n\n\nContigs to annotate\n: \nSPAdes contigs (fasta)\n  \n\n\nLocus tag prefix (\nlocustag)\n: P\n\n\nForce GenBank/ENA/DDJB compliance (\ncompliant)\n: \nNo\n\n\nSequencing Centre ID (\ncentre)\n: V\n\n\nGenus Name\n: \nStaphylococcus\n  \n\n\nSpecies Name\n: \naureus\n  \n\n\nUse genus-specific BLAST database\n \nNo\n  \n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n  \n\n\n\n\nExamine the output\n\n\nFirst, enable \nScratchbook\n in Galaxy - this allows you to view several windows simultaneously. Click on the 3\n3 squares icon on the menu bar:\n\n\n\n\nOnce Prokka has finished, examine each of its output files.\n\n\n\n\nThe GFF and GBK files contain all of the information about the features annotated (in different formats.)\n\n\nThe \n.txt\n file contains a summary of the number of features annotated.\n\n\nThe \n.faa\n file contains the protein sequences of the genes annotated.\n\n\nThe \n.ffn\n file contains the nucleotide sequences of the genes annotated.\n\n\n\n\nView annotated features in JBrowse\n\n\nNow that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer.\n\n\n\n\n\n\nGo to \nStatistics and Visualisation \n Graph/Display Data \n JBrowse\n\n\n\n\n\n\nUnder \nFasta Sequence(s)\n choose \nProkka on data XX:fna\n. This sequence will be the reference against which annotations are displayed.\n\n\n\n\n\n\nFor \nProduce a Standalone Instance\n select \nYes\n.\n\n\n\n\n\n\nFor \nGenetic Code\n choose \n11: The Bacterial, Archaeal and Plant Plastid Code\n.\n\n\n\n\n\n\nClick \nInsert Track Group\n\n\n\n\n\n\nClick \nInsert Annotation Track\n\n\n\n\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\n\n\n\n\nFor \nGFF/GFF3/BED Track Data\n select \nProkka on data XX:gff\n  [Note: not wildtype.gff]\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\n\n\nA new file will be created, called \nJBrowse on data XX and data XX - Complete\n. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.\n\n\n\n\n\n\nUnder \nAvailable Tracks\n on the left, tick the box for \nProkka on data XX:gff\n.\n\n\n\n\n\n\nSelect contig 6 in the drop down box. You can only see one contig displayed at a time.\n\n\n\n\n\n\n\n\n\n\nUse the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right).\n\n\n\n\nZoomed out view:\n\n\n\n\nZoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation.\n\n\nZoomed in view:\n\n\n\n\n\n\nClick on a gene/feature annotation (the bars on the annotation track) to see more information.\n\n\ngene name\n\n\nproduct name\n\n\nyou can download the FASTA sequence by clicking on the disk icon.", 
            "title": "Genome annotation"
        }, 
        {
            "location": "/modules/prokka/#genome-annotation-using-prokka", 
            "text": "", 
            "title": "Genome annotation using Prokka"
        }, 
        {
            "location": "/modules/prokka/#background", 
            "text": "In this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous  tutorial . Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.  Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using  Prodigal ; second, the  function  of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found  here .", 
            "title": "Background"
        }, 
        {
            "location": "/modules/prokka/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   load a genome assembly into Prokka  annotate the assembly using Prokka  examine the annotated genome using JBrowse", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/prokka/#input-data", 
            "text": "Prokka requires assembled contigs.    If you are continuing on from the previous workshop ( Assembly with Spades ), this file will be in your current history:  SPAdes_contigs.fasta .    Alternatively, download the assembled contigs from the  Training dataset page.", 
            "title": "Input data"
        }, 
        {
            "location": "/modules/prokka/#run-prokka", 
            "text": "In Galaxy, go to  Tools   NGS Analysis   NGS: Annotation   Prokka     Set the following parameters (leave everything else unchanged):  Contigs to annotate :  SPAdes contigs (fasta)     Locus tag prefix ( locustag) : P  Force GenBank/ENA/DDJB compliance ( compliant) :  No  Sequencing Centre ID ( centre) : V  Genus Name :  Staphylococcus     Species Name :  aureus     Use genus-specific BLAST database   No        Your tool interface should look like this:    Click  Execute", 
            "title": "Run Prokka"
        }, 
        {
            "location": "/modules/prokka/#examine-the-output", 
            "text": "First, enable  Scratchbook  in Galaxy - this allows you to view several windows simultaneously. Click on the 3 3 squares icon on the menu bar:   Once Prokka has finished, examine each of its output files.   The GFF and GBK files contain all of the information about the features annotated (in different formats.)  The  .txt  file contains a summary of the number of features annotated.  The  .faa  file contains the protein sequences of the genes annotated.  The  .ffn  file contains the nucleotide sequences of the genes annotated.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/prokka/#view-annotated-features-in-jbrowse", 
            "text": "Now that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer.    Go to  Statistics and Visualisation   Graph/Display Data   JBrowse    Under  Fasta Sequence(s)  choose  Prokka on data XX:fna . This sequence will be the reference against which annotations are displayed.    For  Produce a Standalone Instance  select  Yes .    For  Genetic Code  choose  11: The Bacterial, Archaeal and Plant Plastid Code .    Click  Insert Track Group    Click  Insert Annotation Track    For  Track Type  choose  GFF/GFF3/BED/GBK Features    For  GFF/GFF3/BED Track Data  select  Prokka on data XX:gff   [Note: not wildtype.gff]    Your tool interface should look like this:     Click  Execute    A new file will be created, called  JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.    Under  Available Tracks  on the left, tick the box for  Prokka on data XX:gff .    Select contig 6 in the drop down box. You can only see one contig displayed at a time.      Use the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right).   Zoomed out view:   Zoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation.  Zoomed in view:    Click on a gene/feature annotation (the bars on the annotation track) to see more information.  gene name  product name  you can download the FASTA sequence by clicking on the disk icon.", 
            "title": "View annotated features in JBrowse"
        }, 
        {
            "location": "/modules/snippy/", 
            "text": "Variant calling with Snippy\n\n\nBackground\n\n\nVariant calling is the process of identifying differences between two genome samples.\nUsually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by \nvariant calling\n.\n\n\nLearning Objectives\n\n\n\n\nFind variants between a reference genome and a set of reads\n\n\nVisualise the SNP in context of the reads aligned to the genome\n\n\nDetermine the effect of those variants on genomic features\n\n\nUnderstand if the SNP is potentially affecting the phenotype\n\n\n\n\nPrepare reference\n\n\n\n\n\n\n\n\nFor variant calling, we need a reference genome that is of the same strain as the input sequence reads.\n\n\nFor this tutorial, our reference is the \nwildtype.gbk\n file and our reads are \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\nIf these files are not presently in your Galaxy history, import them from the \nTraining dataset page.\n\n\nCall variants with Snippy\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Variant Analysis \n snippy\n\n\nFor \nReference type\n select \nGenbank\n.\n\n\nThen for \nReference Genbank\n choose the \nwildtype.gbk\n file.\n\n\nFor \nSingle or Paired-end reads\n choose \nPaired\n.\n\n\nThen choose the first set of reads, \nmutant_R1.fastq\n and second set of reads, \nmutant_R2.fastq\n.\n\n\nFor \nCleanup the non-snp output files\n select \nNo\n.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n.\n\n\n\n\nExamine Snippy output\n\n\nFirst, enable \nScratchbook\n in Galaxy - this allows you to view several windows simultaneously. Click on the squares:\n\n\n\n\nFrom Snippy, there are 10 output files in various formats.\n\n\n\n\nGo to the file called \nsnippy on data XX, data XX and data XX table\n and click on the eye icon.\n\n\nWe can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion.\n\n\nLook at the third variant called. This is a T\nA mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation? \n\n\n\n\nView Snippy output in JBrowse\n\n\n\n\n\n\nGo to \nStatistics and Visualisation \n Graph/Display Data \n JBrowse\n\n\n\n\n\n\nUnder \nFasta Sequence(s)\n choose \nwildtype.fna\n. This sequence will be the reference against which annotations are displayed.\n\n\n\n\n\n\nFor \nProduce a Standalone Instance\n select \nYes\n.\n\n\n\n\n\n\nFor \nGenetic Code\n choose \n11: The Bacterial, Archaeal and Plant Plastid Code\n.\n\n\n\n\n\n\nWe will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff)\n\n\n\n\n\n\nTrack 1 - sequence reads\n\n\n\n\nClick \nInsert Track Group\n\n\nFor \nTrack Cateogry\n name it \nsequence reads\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nBAM Pileups\n\n\nFor \nBAM Track Data\n select \nthe snippy bam file\n\n\nFor \nAutogenerate SNP Track\n select \nYes\n\n\n\n\nTrack 2 - variants\n\n\n\n\nClick \nInsert Track Group\n again\n\n\nFor \nTrack Category\n name it \nvariants\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\nFor \nSNP Track Data\n select \nthe snippy snps gff file\n\n\n\n\nTrack 3 - annotated reference\n\n\n\n\nClick \nInsert Track Group\n again\n\n\nFor \n Track Category\n name it \nannotated reference\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\nFor \nSNP Track Data\n select \nwildtype.gff\n\n\n\n\nUnder \nJBrowse Styling Options \n JBrowse style. description\n type in \nproduct,note,description\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\n\n\nA new file will be created, called \nJBrowse on data XX and data XX - Complete\n. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.\n\n\n\n\n\n\nOn the left, tick boxes display the tracks\n\n\n\n\n\n\nUse the minus button to zoom out to see:\n\n\n\n\nsequence reads and their coverage (the grey graph)\n\n\n\n\n\n\n\n\nUse the plus button to zoom in to see:\n\n\n\n\nprobable real variants (a whole column of snps)\n\n\nprobable errors (single one here and there)\n\n\n\n\n\n\n\n\n\n\n\n\nIn the coordinates box, type in \n47299\n and then \nGo\n to see the position of the SNP discussed above.\n\n\nthe correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations.\n\n\nthe mutation of T \n A turns this triplet into TGA, a stop codon.", 
            "title": "Variant finding"
        }, 
        {
            "location": "/modules/snippy/#variant-calling-with-snippy", 
            "text": "", 
            "title": "Variant calling with Snippy"
        }, 
        {
            "location": "/modules/snippy/#background", 
            "text": "Variant calling is the process of identifying differences between two genome samples.\nUsually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by  variant calling .", 
            "title": "Background"
        }, 
        {
            "location": "/modules/snippy/#learning-objectives", 
            "text": "Find variants between a reference genome and a set of reads  Visualise the SNP in context of the reads aligned to the genome  Determine the effect of those variants on genomic features  Understand if the SNP is potentially affecting the phenotype", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/modules/snippy/#prepare-reference", 
            "text": "For variant calling, we need a reference genome that is of the same strain as the input sequence reads.  For this tutorial, our reference is the  wildtype.gbk  file and our reads are  mutant_R1.fastq  and  mutant_R2.fastq .  If these files are not presently in your Galaxy history, import them from the  Training dataset page.", 
            "title": "Prepare reference"
        }, 
        {
            "location": "/modules/snippy/#call-variants-with-snippy", 
            "text": "Go to  Tools   NGS Analysis   NGS: Variant Analysis   snippy  For  Reference type  select  Genbank .  Then for  Reference Genbank  choose the  wildtype.gbk  file.  For  Single or Paired-end reads  choose  Paired .  Then choose the first set of reads,  mutant_R1.fastq  and second set of reads,  mutant_R2.fastq .  For  Cleanup the non-snp output files  select  No .   Your tool interface should look like this:    Click  Execute .", 
            "title": "Call variants with Snippy"
        }, 
        {
            "location": "/modules/snippy/#examine-snippy-output", 
            "text": "First, enable  Scratchbook  in Galaxy - this allows you to view several windows simultaneously. Click on the squares:   From Snippy, there are 10 output files in various formats.   Go to the file called  snippy on data XX, data XX and data XX table  and click on the eye icon.  We can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion.  Look at the third variant called. This is a T A mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation?", 
            "title": "Examine Snippy output"
        }, 
        {
            "location": "/modules/snippy/#view-snippy-output-in-jbrowse", 
            "text": "Go to  Statistics and Visualisation   Graph/Display Data   JBrowse    Under  Fasta Sequence(s)  choose  wildtype.fna . This sequence will be the reference against which annotations are displayed.    For  Produce a Standalone Instance  select  Yes .    For  Genetic Code  choose  11: The Bacterial, Archaeal and Plant Plastid Code .    We will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff)    Track 1 - sequence reads   Click  Insert Track Group  For  Track Cateogry  name it  sequence reads  Click  Insert Annotation Track  For  Track Type  choose  BAM Pileups  For  BAM Track Data  select  the snippy bam file  For  Autogenerate SNP Track  select  Yes   Track 2 - variants   Click  Insert Track Group  again  For  Track Category  name it  variants  Click  Insert Annotation Track  For  Track Type  choose  GFF/GFF3/BED/GBK Features  For  SNP Track Data  select  the snippy snps gff file   Track 3 - annotated reference   Click  Insert Track Group  again  For   Track Category  name it  annotated reference  Click  Insert Annotation Track  For  Track Type  choose  GFF/GFF3/BED/GBK Features  For  SNP Track Data  select  wildtype.gff   Under  JBrowse Styling Options   JBrowse style. description  type in  product,note,description    Click  Execute    A new file will be created, called  JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.    On the left, tick boxes display the tracks    Use the minus button to zoom out to see:   sequence reads and their coverage (the grey graph)     Use the plus button to zoom in to see:   probable real variants (a whole column of snps)  probable errors (single one here and there)       In the coordinates box, type in  47299  and then  Go  to see the position of the SNP discussed above.  the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations.  the mutation of T   A turns this triplet into TGA, a stop codon.", 
            "title": "View Snippy output in JBrowse"
        }, 
        {
            "location": "/modules/pacbio/", 
            "text": "Assembly with PacBio data and SMRT Portal\n\n\nThis tutorial will show you how to assemble a bacterial genome \nde novo\n, using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.\n\n\n\n\n\nStart\n\n\n\n\nOpen your mGVL dashboard.\n\n\nYou should see SMRT Portal as one of the instance services on your GVL dashboard.\n\n\nOpen up the SMRT portal web link (to the right) and register/log on.\n\n\n\n\nData\n\n\nWe will use a publicly available data-set of PacBio reads from the bacteria \nE. coli\n (reference link below). This has already been added to SMRT Portal for this tutorial.\n\n\nInput\n\n\nIf using this tutorial during a training session, proceed to the next step (Assembly).\n\n\nOtherwise:\n\n\n\n\nLoad the PacBio data (your own, or the training \nE. coli\n dataset) onto your GVL.\n\n\nIn the SMRT Portal, go to \nDesign Job\n, the top left tab.\n\n\nGo to \nImport and Manage\n.\n\n\n\nClick \nImport SMRT cells\n.\n\n\n\nWork out where you put the data on your GVL, and make sure the file path is showing.\n\n\nIf not, click \nAdd\n and enter the file path to the data.\n\n\n\n\n\n\nClick on the file path and then \nScan\n to check for new data.\n\n\n\n\nAssembly\n\n\n\n\nIn the SMRT Portal, go to the top left tab, \nDesign Job\n.\n\n\nGo to \nCreate New\n.\n\n\nAn \nAnalysis\n window should appear. Check the box next to \nDe novo assembly\n, then \nNext\n.\n\n\nUnder \nJob Name\n enter a name.\n\n\nUnder \nProtocols\n choose \nRS_HGAP_Assembly.3\n.\n\n\nThere is an ellipsis underneath \nProtocols\n - click on the ellipsis.\n\n\n\n\n\n\nThis brings up the settings. Click on \nAssembly\n.\n\n\n\n\nFor \nCompute Minimum Seed Read Length\n: ensure box is ticked\n\n\nFor \nNumber of Seed Read Chunks\n: enter \n12\n\n\nChange the \nGenome Size\n to an approximately correct size for the species.\n\n\nFor \nTarget Coverage\n: enter \n10\n\n\nFor \nOverlapper Error Rate\n: enter \n0.04\n\n\nLeave all other settings as they are.\n\n\nClick \nApply\n\n\n\n\nYour protocol window should look like this:\n\n\n\n\n\n\n\n\nClick \nOk\n.  \n\n\n\n\n\n\nIn the \nSMRT Cells Available\n window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.\n\n\n\n\n\n\n\n\n\n\nClick \nSave\n (bottom right hand side).\n\n\nNext to \nSave\n, click \nStart\n.\n\n\nThe \nMonitor Jobs\n window should open.\n\n\nAs each step proceeds, new items will appear under the \nReports\n and \nData\n tabs on the left.\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\n\n\nClick on the top right tab, \nView Data\n.\n\n\nDouble click on the job name to open its reports.\n\n\n\n\n\n\nClick on different \nReports\n in the left hand panel.\n\n\nClick on \nAssembly \n Pre-Assembly\n\n\nsee \nLength Cutoff\n for the calcuated sequence read length that was used: shorter reads were mapped against reads of at least this length to make pre-assembled reads.\n\n\nsee number of \nPre-Assembled Reads\n\n\nsee average \nPre-Assembled Reads Length\n    \n\n\n\n\n\n\nClick on \nAssembly \n Polished Assembly\n.\n\n\nSee how many \nPolished Contigs\n were found.\n\n\nSee the \nMax Contig Length\n.\n\n\nAre there multiple contigs?\n\n\nAre some of these plasmids?\n\n\n\n\n\n\n\n\n\n\n\nFurther Polishing\n\n\nDuring polishing, raw reads are used to correct the assembly.\nDuring HGAP, the assembly was polished once but may need further corrections.\n\n\n\n\nFrom the previous step, Go to \nData \n Assembly \n Polished Assembly\n and download the FASTA file by clicking on it.\n\n\nUnzip the .gz file\n\n\n\n\n\n\nGo to \nDesign Job \n Import and Manage\n and click \nNew\n on the bottom right hand side. Then, select that FASTA assembly file to upload.\n\n\ncreates a new reference.\n\n\n\n\n\n\nGo to \nDesign Job \n Create New\n\n\nchoose reference-based\n\n\nSelect protocol: RS_Resequencing.1\n\n\nLeave all settings.\n\n\nSelect your reference from the drop down menu.\n\n\nClick \nSave\n and \nStart\n.\n\n\n\n\n\n\nExamine the output assembly and repeat if necessary.\n\n\n\n\n\n\n\n\n\n\nLinks to more information\n\n\nPacBio \nE. coli\n data set\n\n\nHGAP overview\n\n\nA full ist of reports and terminology\n\n\nVideo overview of HGAP on SMRT portal", 
            "title": "Assembly with SMRT portal"
        }, 
        {
            "location": "/modules/pacbio/#assembly-with-pacbio-data-and-smrt-portal", 
            "text": "This tutorial will show you how to assemble a bacterial genome  de novo , using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.", 
            "title": "Assembly with PacBio data and SMRT Portal"
        }, 
        {
            "location": "/modules/pacbio/#start", 
            "text": "Open your mGVL dashboard.  You should see SMRT Portal as one of the instance services on your GVL dashboard.  Open up the SMRT portal web link (to the right) and register/log on.", 
            "title": "Start"
        }, 
        {
            "location": "/modules/pacbio/#data", 
            "text": "We will use a publicly available data-set of PacBio reads from the bacteria  E. coli  (reference link below). This has already been added to SMRT Portal for this tutorial.", 
            "title": "Data"
        }, 
        {
            "location": "/modules/pacbio/#input", 
            "text": "If using this tutorial during a training session, proceed to the next step (Assembly).  Otherwise:   Load the PacBio data (your own, or the training  E. coli  dataset) onto your GVL.  In the SMRT Portal, go to  Design Job , the top left tab.  Go to  Import and Manage .  Click  Import SMRT cells .  Work out where you put the data on your GVL, and make sure the file path is showing.  If not, click  Add  and enter the file path to the data.    Click on the file path and then  Scan  to check for new data.", 
            "title": "Input"
        }, 
        {
            "location": "/modules/pacbio/#assembly", 
            "text": "In the SMRT Portal, go to the top left tab,  Design Job .  Go to  Create New .  An  Analysis  window should appear. Check the box next to  De novo assembly , then  Next .  Under  Job Name  enter a name.  Under  Protocols  choose  RS_HGAP_Assembly.3 .  There is an ellipsis underneath  Protocols  - click on the ellipsis.    This brings up the settings. Click on  Assembly .   For  Compute Minimum Seed Read Length : ensure box is ticked  For  Number of Seed Read Chunks : enter  12  Change the  Genome Size  to an approximately correct size for the species.  For  Target Coverage : enter  10  For  Overlapper Error Rate : enter  0.04  Leave all other settings as they are.  Click  Apply   Your protocol window should look like this:     Click  Ok .      In the  SMRT Cells Available  window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.      Click  Save  (bottom right hand side).  Next to  Save , click  Start .  The  Monitor Jobs  window should open.  As each step proceeds, new items will appear under the  Reports  and  Data  tabs on the left.", 
            "title": "Assembly"
        }, 
        {
            "location": "/modules/pacbio/#output", 
            "text": "Click on the top right tab,  View Data .  Double click on the job name to open its reports.    Click on different  Reports  in the left hand panel.  Click on  Assembly   Pre-Assembly  see  Length Cutoff  for the calcuated sequence read length that was used: shorter reads were mapped against reads of at least this length to make pre-assembled reads.  see number of  Pre-Assembled Reads  see average  Pre-Assembled Reads Length         Click on  Assembly   Polished Assembly .  See how many  Polished Contigs  were found.  See the  Max Contig Length .  Are there multiple contigs?  Are some of these plasmids?", 
            "title": "Output"
        }, 
        {
            "location": "/modules/pacbio/#further-polishing", 
            "text": "During polishing, raw reads are used to correct the assembly.\nDuring HGAP, the assembly was polished once but may need further corrections.   From the previous step, Go to  Data   Assembly   Polished Assembly  and download the FASTA file by clicking on it.  Unzip the .gz file    Go to  Design Job   Import and Manage  and click  New  on the bottom right hand side. Then, select that FASTA assembly file to upload.  creates a new reference.    Go to  Design Job   Create New  choose reference-based  Select protocol: RS_Resequencing.1  Leave all settings.  Select your reference from the drop down menu.  Click  Save  and  Start .    Examine the output assembly and repeat if necessary.", 
            "title": "Further Polishing"
        }, 
        {
            "location": "/modules/pacbio/#links-to-more-information", 
            "text": "PacBio  E. coli  data set  HGAP overview  A full ist of reports and terminology  Video overview of HGAP on SMRT portal", 
            "title": "Links to more information"
        }, 
        {
            "location": "/modules/dge/", 
            "text": "Differential Gene Expression\n\n\nThis tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).\n\n\n\n\n\nBackground\n\n\nDifferential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.\n\n\nLearning Objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nAlign RNA-Seq data to a reference genome  \n\n\nCount transcripts for each sample\n\n\nPerform statistical analysis to obtain a list of differentially expressed genes\n\n\nVisualize and interpret the results\n\n\n\n\nInput data: reads and reference\n\n\nRNA-Seq reads\n\n\nA typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.\n\n\n\n\nOur RNA-seq reads are from 6 samples in \nFASTQ\n format.\n\n\nWe have single-end reads; so one file per sample.\n\n\nData could also be paired-end reads, and there would be two files per sample.\n\n\n\n\n\n\nThese have been reduced to 1% of their original size for this tutorial.\n\n\nThe experiment used the bacteria \nE. coli\n grown in two conditions.\n\n\nFiles labelled \nLB\n are the wildtype\n\n\nFiles labelled \nMG\n have been exposed to 0.5% \nMG - alpha methyglucoside (a sugar solution).\n\n\n\n\n\n\n\n\n\n\n\nReference genome\n\n\nThe reference genomes is in \nFASTA\n format and the gene annotations are in \nGTF\n format.\n\n\n\n\nThe \nFASTA\n file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids.\n\n\nThe \nGTF\n file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences.\n\n\n\n\n\n\n\nUpload files to Galaxy\n\n\n\n\nLog in to your Galaxy server.\n\n\nIn the \nHistory\n pane, click on the cog\nicon, and select \nImport from File\n (at the bottom of the list).\n\n\nUnder \nArchived History URL\n paste:\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz\n\n\nIn the \nHistory\n pane, click on the view\nicon and find the uploaded history.\n\n\n(This may take a minute. Refresh the page.)\n\n\n\n\n\n\nClick \nSwitch to\n that history, then \nDone\n.\n\n\nThe files should now be ready to use in your current History pane.\n\n\n\n\n\n\nAlign reads to reference\n\n\nThe RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome.\n\n\nIn Galaxy:\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Mapping \n Map with BWA-MEM\n\n\nUnder \nWill you select a reference genome from your history or use a built-in index?\n: \nUse a genome from history and build index\n\n\nUse the following dataset as the reference sequence\n: \nEcoli_k12.fasta\n\n\nSingle or Paired-end reads\n: \nsingle\n\n\nSelect fastq dataset\n:\n\n\nClick on the \nMultiple Datasets\n icon in centre\n\n\nSelect all 6 \nFASTQ\n files (they turn blue; use side-scroll bar to check all have been selected)\n\n\nThis will map each set of reads to the reference genome\n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n\n\nClick \nRefresh\n in the history pane to see if the analysis has finished.\n\n\n\n\nOutput: 6 \nbam\n files of reads mapped to the reference genome.\n\n\n\n\n\n\nRe-name the output files:\n\n\n\n\nThese are called \nMap with BWA-MEM on data x and data x\n.\n\n\nClick on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.).\n\n\nClick \nSave\n.\n\n\n\n\n\n\n\n\nCount reads per gene\n\n\nWe now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file.\n\n\nIn Galaxy:\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: RNA Analysis \n SAM/BAM to count matrix\n.\n\n\nNote: Don\nt select the tool called \nhtseq-count\n. The \nSAM/BAM to count matrix\n also uses that tool but allows an input of multiple bam files, which is what we want.\n\n\n\n\n\n\nFor \nGene model (GFF) file to count reads over from your current history\n, select the \nGTF\n file.\n\n\nFor \nReads are stranded\n select \nYes\n (box turns dark grey)\n\n\nFor \nGTF feature type for counting reads\n select \ntranscript\n.\n\n\nFor \nbam/sam file from your history\n choose the 6 \nbam\n files.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n\n\nClick \nRefresh\n in the history pane to see if the analysis has finished.\n\n\n\n\nOutput:\n\n\n\n\nThere is one output file: \nbams to DGE count matrix\n.\n\n\nClick on the file name to expand the information in the History pane.\n\n\nClick on the file \nicon underneath to download it to your computer for use later on in this tutorial.\n\n\nClick on the eye icon to see this file.\n\n\n\n\n\n\n\n\nEach row is a gene (or feature) and each column is a sample, with counts against each gene.\n\n\nHave a look at how the counts vary between samples, per gene.\n\n\nWe can\nt just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.\n\n\n\n\nDGE in Degust\n\n\nDegust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.\n\n\n(Degust can also display the results from DGE analyses performed elsewhere.)\n\n\nUpload counts file\n\n\nGo to the \nDegust web page\n. Click \nGet Started\n.\n\n\n\n\n\n\nClick on \nChoose File\n.\n\n\nSelect the \nhtseq output file. tabular\n (that you previously downloaded to your computer from Galaxy) and click \nOpen\n.\n\n\nClick \nUpload\n.\n\n\n\n\nA Configuation page will appear.\n\n\n\n\nFor \nName\n type \nDGE in E coli\n\n\nFor \nInfo columns\n select \nContig\n\n\nFor \nAnalyze server side\n leave box checked.\n\n\nFor \nMin read count\n put \n10\n.\n\n\nClick \nAdd condition\n\n\nAdd a condition called \nControl\n and select the LB columns.\n\n\nAdd a condition called \nTreament\n and select the MG columns.\n\n\n\n\n\n\n\n\nYour Configuration page should look like this:\n\n\n\n\n\n\nSave changes\n\n\nView\n - this brings up the Degust viewing window.\n\n\n\n\nOverview of Degust sections\n\n\n\n\nTop black panel with \nConfigure\n settings at right.\n\n\nLeft: Conditions: Control and Treatment.\n\n\nLeft: Method selection for DGE.\n\n\nTop centre: Plots, with options at right.\n\n\nWhen either of the expression plots are selected, a heatmap appears below.\n\n\nA table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).  \n\n\n\n\n\n\nAnalyze gene expression\n\n\n\n\nUnder \nMethod\n, make sure that \nVoom/Limma\n is selected.\n\n\nClick \nApply\n. This runs Voom/Limma on the uploaded counts.\n\n\n\n\nMDS plot\n\n\nFirst, look at the MDS plot.\n\n\n\n\n\n\nThis is a multidimensional scaling plot which represents the variation between samples.\n\n\nIdeally:\n\n\nAll the LB samples would be close to each other\n\n\nAll the MG samples would be close to each other\n\n\nThe LB and MG groups would be far apart\n\n\n\n\n\n\nThe x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.\n\n\nOur LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.\n\n\n\n\nExpression - MA plot\n\n\nEach dot shows the change in expression in one gene.\n\n\n\n\nThe average expression (over both condition and treatment samples) is represented on the x-axis.\n\n\nPlot points should be symmetrical around the x-axis.\n\n\nWe can see that many genes are expressed at a low level, and some are highly expressed.\n\n\n\n\n\n\nThe fold change is represented on the y axis.\n\n\nIf expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR \n0.05).\n\n\nAt low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.\n\n\n\n\n\n\n\n\nClick on the dot to see the gene name.     \n\n\n\n\nExpression - Parallel Coordinates and heatmap\n\n\nEach line shows the change in expression in one gene, between control and treatment.\n\n\n\n\nGo to \nOptions\n at the right.\n\n\nFor \nFDR cut-off\n set at 0.001.\n\n\nThis is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.\n\n\n\n\n\n\n\n\nLook at the Parallel Coordinates plot. There are two axes:\n\n\n\n\nLeft: \nControl\n: Gene expression in the control samples. All values are set at zero.\n\n\nRight: \nTreatment\n Gene expression in the treatment samples, relative to expression in the control.\n\n\n\n\n\n\n\n\nThe blocks of blue and red underneath the plot are called a heatmap.\n\n\n\n\nEach block is a gene. Click on a block to see its line in the plot above.\n\n\nLook at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nfor an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).\n\n\n\n\nTable of genes\n\n\n\n\nContig\n: names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).\n\n\nFDR\n: False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.\n\n\nControl\n and \nTreatment\n: log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the \nControl\n column are zero. This can be changed in the \nOptions\n panel at the top right.\n\n\nIn some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.\n\n\n\n\nTable of genes and expression:\n\n\n\n\n\n\n\nDGE in Galaxy\n\n\nDifferential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above: \nCount reads per gene\n).\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: RNA Analysis \n Differential Count models\n\n\nThis has options to use edgeR, DESeq, or Voom. Here we will use Voom.\n\n\n\n\n\n\nFor \nSelect an input matrix\n choose the \ncount matrix\n file generated in the previous step.\n\n\nFor \nTitle for job outputs\n enter \nDGE using voom\n.\n\n\nFor \nSelect columns containing treatment\n tick boxes for the MG samples.\n\n\nFor \nSelect columns containing control\n tick boxes for the LB samples.\n\n\nUnder \nRun this model using edgeR\n choose \nDo not run edgeR\n.\n\n\nUnder \nRun the same model with DESeq2 and compare findings\n choose \nDo not run DESeq2\n.\n\n\nUnder \nRun the same model with Voom/limma and compare findings\n choose \nRun VOOM\n.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n.\n\n\n\n\nThere are two output files.\n\n\nView the file called \nDGEusingvoom.html\n.\n\n\n\n\nScroll down to \nVOOM log output\n and \n#VOOM top 50\n.\n\n\nThe \nContig\n column has the gene names.\n\n\nLook at the \nadj.P.Val\n column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column.\n\n\nLook at the \nlogFC\n column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples.\n\n\n\n\nView the file called \nDEGusingvoom_topTable_VOOM.xls\n.\n\n\n\n\nThis is a list of all the genes that had transcripts mapped, and associated statistics.\n\n\n\n\nWhat next?\n\n\nTo learn more about the differentially-expressed genes:\n\n\n\n\nGo to \nthe NCBI website.\n\n\nUnder \nAll Databases\n, click on \nGene\n\n\nEnter the gene name in the search bar; e.g. ptsG\n\n\nClick on the first result that matches the species (e.g. in this case, \nE. coli\n).\n\n\nThis provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).\n\n\n\n\n\n\n\n\nSome of the most (statistically) significant differentially-expressed genes in this experiment are:\n\n\n\n\nptsG\n: a glucose-specific transporter.\n\n\nsetA\n: a sugar efflux transporter; is induced by glucose-phosphate stress.\n\n\nsucD\n: the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production.\n\n\nsucB\n: a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle.\n\n\ndeoC\n: 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport.\n\n\n\n\nNext steps: Investigate the biochemical pathways involving the genes of interest, using resources such as:\n\n\n\n\nKEGG pathways\n\n\nGene Set Enrichment Analysis\n\n\n\n\nMore information\n\n\n\n\nLink to Degust.\n\n\nLink to Voom paper.", 
            "title": "Differential gene expression"
        }, 
        {
            "location": "/modules/dge/#differential-gene-expression", 
            "text": "This tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).", 
            "title": "Differential Gene Expression"
        }, 
        {
            "location": "/modules/dge/#background", 
            "text": "Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/dge/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   Align RNA-Seq data to a reference genome    Count transcripts for each sample  Perform statistical analysis to obtain a list of differentially expressed genes  Visualize and interpret the results", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/modules/dge/#input-data-reads-and-reference", 
            "text": "RNA-Seq reads  A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.   Our RNA-seq reads are from 6 samples in  FASTQ  format.  We have single-end reads; so one file per sample.  Data could also be paired-end reads, and there would be two files per sample.    These have been reduced to 1% of their original size for this tutorial.  The experiment used the bacteria  E. coli  grown in two conditions.  Files labelled  LB  are the wildtype  Files labelled  MG  have been exposed to 0.5%  MG - alpha methyglucoside (a sugar solution).      Reference genome  The reference genomes is in  FASTA  format and the gene annotations are in  GTF  format.   The  FASTA  file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids.  The  GTF  file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences.    Upload files to Galaxy   Log in to your Galaxy server.  In the  History  pane, click on the cog icon, and select  Import from File  (at the bottom of the list).  Under  Archived History URL  paste: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz  In the  History  pane, click on the view icon and find the uploaded history.  (This may take a minute. Refresh the page.)    Click  Switch to  that history, then  Done .  The files should now be ready to use in your current History pane.", 
            "title": "Input data: reads and reference"
        }, 
        {
            "location": "/modules/dge/#align-reads-to-reference", 
            "text": "The RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome.  In Galaxy:   Go to  Tools   NGS Analysis   NGS: Mapping   Map with BWA-MEM  Under  Will you select a reference genome from your history or use a built-in index? :  Use a genome from history and build index  Use the following dataset as the reference sequence :  Ecoli_k12.fasta  Single or Paired-end reads :  single  Select fastq dataset :  Click on the  Multiple Datasets  icon in centre  Select all 6  FASTQ  files (they turn blue; use side-scroll bar to check all have been selected)  This will map each set of reads to the reference genome     Your tool interface should look like this:    Click  Execute  Click  Refresh  in the history pane to see if the analysis has finished.   Output: 6  bam  files of reads mapped to the reference genome.    Re-name the output files:   These are called  Map with BWA-MEM on data x and data x .  Click on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.).  Click  Save .", 
            "title": "Align reads to reference"
        }, 
        {
            "location": "/modules/dge/#count-reads-per-gene", 
            "text": "We now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file.  In Galaxy:   Go to  Tools   NGS Analysis   NGS: RNA Analysis   SAM/BAM to count matrix .  Note: Don t select the tool called  htseq-count . The  SAM/BAM to count matrix  also uses that tool but allows an input of multiple bam files, which is what we want.    For  Gene model (GFF) file to count reads over from your current history , select the  GTF  file.  For  Reads are stranded  select  Yes  (box turns dark grey)  For  GTF feature type for counting reads  select  transcript .  For  bam/sam file from your history  choose the 6  bam  files.   Your tool interface should look like this:    Click  Execute  Click  Refresh  in the history pane to see if the analysis has finished.   Output:   There is one output file:  bams to DGE count matrix .  Click on the file name to expand the information in the History pane.  Click on the file  icon underneath to download it to your computer for use later on in this tutorial.  Click on the eye icon to see this file.     Each row is a gene (or feature) and each column is a sample, with counts against each gene.  Have a look at how the counts vary between samples, per gene.  We can t just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.", 
            "title": "Count reads per gene"
        }, 
        {
            "location": "/modules/dge/#dge-in-degust", 
            "text": "Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.  (Degust can also display the results from DGE analyses performed elsewhere.)", 
            "title": "DGE in Degust"
        }, 
        {
            "location": "/modules/dge/#upload-counts-file", 
            "text": "Go to the  Degust web page . Click  Get Started .    Click on  Choose File .  Select the  htseq output file. tabular  (that you previously downloaded to your computer from Galaxy) and click  Open .  Click  Upload .   A Configuation page will appear.   For  Name  type  DGE in E coli  For  Info columns  select  Contig  For  Analyze server side  leave box checked.  For  Min read count  put  10 .  Click  Add condition  Add a condition called  Control  and select the LB columns.  Add a condition called  Treament  and select the MG columns.     Your Configuration page should look like this:    Save changes  View  - this brings up the Degust viewing window.", 
            "title": "Upload counts file"
        }, 
        {
            "location": "/modules/dge/#overview-of-degust-sections", 
            "text": "Top black panel with  Configure  settings at right.  Left: Conditions: Control and Treatment.  Left: Method selection for DGE.  Top centre: Plots, with options at right.  When either of the expression plots are selected, a heatmap appears below.  A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).", 
            "title": "Overview of Degust sections"
        }, 
        {
            "location": "/modules/dge/#analyze-gene-expression", 
            "text": "Under  Method , make sure that  Voom/Limma  is selected.  Click  Apply . This runs Voom/Limma on the uploaded counts.", 
            "title": "Analyze gene expression"
        }, 
        {
            "location": "/modules/dge/#mds-plot", 
            "text": "First, look at the MDS plot.    This is a multidimensional scaling plot which represents the variation between samples.  Ideally:  All the LB samples would be close to each other  All the MG samples would be close to each other  The LB and MG groups would be far apart    The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.  Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.", 
            "title": "MDS plot"
        }, 
        {
            "location": "/modules/dge/#expression-ma-plot", 
            "text": "Each dot shows the change in expression in one gene.   The average expression (over both condition and treatment samples) is represented on the x-axis.  Plot points should be symmetrical around the x-axis.  We can see that many genes are expressed at a low level, and some are highly expressed.    The fold change is represented on the y axis.  If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR  0.05).  At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.     Click on the dot to see the gene name.", 
            "title": "Expression - MA plot"
        }, 
        {
            "location": "/modules/dge/#expression-parallel-coordinates-and-heatmap", 
            "text": "Each line shows the change in expression in one gene, between control and treatment.   Go to  Options  at the right.  For  FDR cut-off  set at 0.001.  This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.     Look at the Parallel Coordinates plot. There are two axes:   Left:  Control : Gene expression in the control samples. All values are set at zero.  Right:  Treatment  Gene expression in the treatment samples, relative to expression in the control.     The blocks of blue and red underneath the plot are called a heatmap.   Each block is a gene. Click on a block to see its line in the plot above.  Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.      Note:   for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).", 
            "title": "Expression - Parallel Coordinates and heatmap"
        }, 
        {
            "location": "/modules/dge/#table-of-genes", 
            "text": "Contig : names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).  FDR : False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.  Control  and  Treatment : log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the  Control  column are zero. This can be changed in the  Options  panel at the top right.  In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.   Table of genes and expression:", 
            "title": "Table of genes"
        }, 
        {
            "location": "/modules/dge/#dge-in-galaxy", 
            "text": "Differential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above:  Count reads per gene ).   Go to  Tools   NGS Analysis   NGS: RNA Analysis   Differential Count models  This has options to use edgeR, DESeq, or Voom. Here we will use Voom.    For  Select an input matrix  choose the  count matrix  file generated in the previous step.  For  Title for job outputs  enter  DGE using voom .  For  Select columns containing treatment  tick boxes for the MG samples.  For  Select columns containing control  tick boxes for the LB samples.  Under  Run this model using edgeR  choose  Do not run edgeR .  Under  Run the same model with DESeq2 and compare findings  choose  Do not run DESeq2 .  Under  Run the same model with Voom/limma and compare findings  choose  Run VOOM .   Your tool interface should look like this:    Click  Execute .   There are two output files.  View the file called  DGEusingvoom.html .   Scroll down to  VOOM log output  and  #VOOM top 50 .  The  Contig  column has the gene names.  Look at the  adj.P.Val  column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column.  Look at the  logFC  column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples.   View the file called  DEGusingvoom_topTable_VOOM.xls .   This is a list of all the genes that had transcripts mapped, and associated statistics.", 
            "title": "DGE in Galaxy"
        }, 
        {
            "location": "/modules/dge/#what-next", 
            "text": "To learn more about the differentially-expressed genes:   Go to  the NCBI website.  Under  All Databases , click on  Gene  Enter the gene name in the search bar; e.g. ptsG  Click on the first result that matches the species (e.g. in this case,  E. coli ).  This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).     Some of the most (statistically) significant differentially-expressed genes in this experiment are:   ptsG : a glucose-specific transporter.  setA : a sugar efflux transporter; is induced by glucose-phosphate stress.  sucD : the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production.  sucB : a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle.  deoC : 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport.   Next steps: Investigate the biochemical pathways involving the genes of interest, using resources such as:   KEGG pathways  Gene Set Enrichment Analysis", 
            "title": "What next?"
        }, 
        {
            "location": "/modules/dge/#more-information", 
            "text": "Link to Degust.  Link to Voom paper.", 
            "title": "More information"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\nThe Food and Health Flagship is an RDS-funded project to provide cloud-based data services and tools\nfor Australian Life Science Researchers to combine, analyse and interpret\ngenomic, transcriptomic, proteomic and metabolomic data. The data platform will incorporate the Bioplatforms Australia Antibiotic Resistant Pathogens Initiative (ABRPI).\n\n\nAuthors\n\n\n Anna Syme\n\n\n Torsten Seemann\n\n\n Simon Gladman\n\n\n Dieter Bulach\n\n\nSupport\n\n\n\n\nResearch Data Services\n\n\nBioplatforms Australia\n\n\nNectar\n\n\n\n\n\n\nThese training materials have been used for:\n\n\nMcGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada\n\n\n\n\n\n\nGalaxy Community Conference 2016, Indiana, USA\n\n\n\n\n\n\nCLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016", 
            "title": "About"
        }, 
        {
            "location": "/about/#about", 
            "text": "The Food and Health Flagship is an RDS-funded project to provide cloud-based data services and tools\nfor Australian Life Science Researchers to combine, analyse and interpret\ngenomic, transcriptomic, proteomic and metabolomic data. The data platform will incorporate the Bioplatforms Australia Antibiotic Resistant Pathogens Initiative (ABRPI).", 
            "title": "About"
        }, 
        {
            "location": "/about/#authors", 
            "text": "Anna Syme   Torsten Seemann   Simon Gladman   Dieter Bulach", 
            "title": "Authors"
        }, 
        {
            "location": "/about/#support", 
            "text": "Research Data Services  Bioplatforms Australia  Nectar    These training materials have been used for:  McGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada    Galaxy Community Conference 2016, Indiana, USA    CLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016", 
            "title": "Support"
        }
    ]
}