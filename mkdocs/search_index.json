{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome!\n\n\nABRPI training materials\n\n\nAntibiotic Resistant Pathogens Initiative\n\n\nThis site contains tutorials for using the\n\nMicrobial Genomics Virtual Lab\n to perform bioinformatics\ntasks on bacterial \nomics\n data, either on the Unix command line or using\nthe \nGalaxy\n system.\n\n\nTutorials on assembly, annotation and variant calling can be found under the \nMicrobial Genomics\n tab in the top panel.\n\n\n\n\n\nTutorials on examining differential gene expression can be found under \nMicrobial Transcriptomics\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "", 
            "title": "Welcome!"
        }, 
        {
            "location": "/#abrpi-training-materials", 
            "text": "", 
            "title": "ABRPI training materials"
        }, 
        {
            "location": "/#antibiotic-resistant-pathogens-initiative", 
            "text": "This site contains tutorials for using the Microbial Genomics Virtual Lab  to perform bioinformatics\ntasks on bacterial  omics  data, either on the Unix command line or using\nthe  Galaxy  system.  Tutorials on assembly, annotation and variant calling can be found under the  Microbial Genomics  tab in the top panel.   Tutorials on examining differential gene expression can be found under  Microbial Transcriptomics .", 
            "title": "Antibiotic Resistant Pathogens Initiative"
        }, 
        {
            "location": "/modules/galaxy/", 
            "text": "Get Data into Galaxy\n\n\nGalaxy Background\n\n\nGalaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.\n\n\nGalaxy is an open, web-based platform. Details about the project can be found \nhere\n.\n\n\nThe Galaxy interface is separated into three parts. The \nTools\n list on the left, the \nViewing\n panel in the middle and the analysis and data \nHistory\n on the right.\n\n\n\n\nRegister in Galaxy\n\n\nOpen a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari.\n\n\nIn the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL.\n\n\n\n\nClick on \nUser\n button on the right.\n\n\n\n\n\n\nSelect: \nUser \n Register\n\n\nEnter your email, choose a password, and choose a user name.\n\n\nClick \nSubmit\n\n\n\n\nImport a history\n\n\n\n\nIn the menu options across the top, go to \nShared Data\n.\n\n\nClick on \nHistories\n.\n\n\n\n\n\n\n\n\nA list of published histories should appear. Click on the history that you want to use.\n\n\nClick on \nImport history\n.\n\n\n\n\nAn option will appear to re-name the history. We don\nt need to rename it, so click \nImport\n.\n\n\n\n\n\n\nThe history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses.\n\n\n\n\n\n\nOther ways to import data into Galaxy\n\n\n\n\nUpload a file from your computer\n\n\nCopy a link to a Galaxy history\n\n\nFor sample training data files to use, see the \nnext section.", 
            "title": "Starting with Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#get-data-into-galaxy", 
            "text": "", 
            "title": "Get Data into Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#galaxy-background", 
            "text": "Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.  Galaxy is an open, web-based platform. Details about the project can be found  here .  The Galaxy interface is separated into three parts. The  Tools  list on the left, the  Viewing  panel in the middle and the analysis and data  History  on the right.", 
            "title": "Galaxy Background"
        }, 
        {
            "location": "/modules/galaxy/#register-in-galaxy", 
            "text": "Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari.  In the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL.   Click on  User  button on the right.    Select:  User   Register  Enter your email, choose a password, and choose a user name.  Click  Submit", 
            "title": "Register in Galaxy"
        }, 
        {
            "location": "/modules/galaxy/#import-a-history", 
            "text": "In the menu options across the top, go to  Shared Data .  Click on  Histories .     A list of published histories should appear. Click on the history that you want to use.  Click on  Import history .   An option will appear to re-name the history. We don t need to rename it, so click  Import .    The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses.", 
            "title": "Import a history"
        }, 
        {
            "location": "/modules/galaxy/#other-ways-to-import-data-into-galaxy", 
            "text": "Upload a file from your computer  Copy a link to a Galaxy history  For sample training data files to use, see the  next section.", 
            "title": "Other ways to import data into Galaxy"
        }, 
        {
            "location": "/modules/data-dna/", 
            "text": "Dataset\n\n\nThis page contains data for the tutorials.\n\n\nIndividual input files\n\n\nWildtype reference\n\n\n\n\nwildtype.fna\n\n\n\n\n https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.fna\n\n\n\n\nwildtype.gbk\n\n\n\n\n https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gbk\n\n\n\n\nwildtype.gff\n\n\n\n\n https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gff\n\n\nMutant Illumina sequence\n\n\n\n\nmutant_R1.fastq.gz\n\n\n\n\n https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R1.fastq.gz\n\n\n\n\nmutant_R2.fastq.gz\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R2.fastq.gz\n\n\nAssembled contigs\n\n\n\n\nSPAdes_contigs.fasta\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/SPAdes_contigs.fasta\n\n\nUpload to Galaxy\n\n\n\n\nDownload required file(s) to your computer.\n\n\nFrom the Galaxy tool panel, click on \nGet Data \n Upload File\n  \n\n\nClick the \nChoose local file\n button  \n\n\nFind and select the \nfile\n you downloaded and click \nOpen\n  \n\n\nSet the \nType\n correctly.  \n\n\nClick the \nStart\n button.  \n\n\nOnce the progress bar reaches 100%, click the \nClose\n button  \n\n\nThe file will now upload to your current history.\n\n\n\n\nGalaxy histories\n\n\n\n\nGalaxy history of input files\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy_history_input_files.tar.gz\n\n\n\n\nGalaxy history: FastQC\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/FastQChistory.tar.gz\n\n\n\n\nGalaxy history: Spades\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Spadeshistory.tar.gz\n\n\n\n\nGalaxy history: Prokka\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Prokkahistory.tar.gz\n\n\n\n\nGalaxy history: Snippy\n\n\n\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Snippyhistory.tar.gz\n\n\nTo get the saved tutorial history (a set of files) into Galaxy:\n\n\n\n\nCopy the link address.\n\n\nGo to your Galaxy instance. Make sure you are registered and logged in. Refresh the page.\n\n\nClick on the \nHistory\n cog \n\n\nSelect \nImport from File\n\n\n\n\n\n\n\n\nIn the box called \nArchived History URL\n, paste in the link address to the Galaxy history.\n\n\nClick \nSubmit\n\n\nWait a few seconds.\n\n\nClick on the \nview all histories\n button \n\n\nSee if the Galaxy history has been imported: it will be called \nimported from archive: Data\n\n\nAbove that pane, click on the \nSwitch to\n button.\n\n\nThen click \nDone\n (in the top left corner).\n\n\nYou should now have a list of five files in your current history.", 
            "title": "Training dataset"
        }, 
        {
            "location": "/modules/data-dna/#dataset", 
            "text": "This page contains data for the tutorials.", 
            "title": "Dataset"
        }, 
        {
            "location": "/modules/data-dna/#individual-input-files", 
            "text": "", 
            "title": "Individual input files"
        }, 
        {
            "location": "/modules/data-dna/#wildtype-reference", 
            "text": "wildtype.fna    https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.fna   wildtype.gbk    https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gbk   wildtype.gff    https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gff", 
            "title": "Wildtype reference"
        }, 
        {
            "location": "/modules/data-dna/#mutant-illumina-sequence", 
            "text": "mutant_R1.fastq.gz    https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R1.fastq.gz   mutant_R2.fastq.gz   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R2.fastq.gz", 
            "title": "Mutant Illumina sequence"
        }, 
        {
            "location": "/modules/data-dna/#assembled-contigs", 
            "text": "SPAdes_contigs.fasta   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/SPAdes_contigs.fasta", 
            "title": "Assembled contigs"
        }, 
        {
            "location": "/modules/data-dna/#upload-to-galaxy", 
            "text": "Download required file(s) to your computer.  From the Galaxy tool panel, click on  Get Data   Upload File     Click the  Choose local file  button    Find and select the  file  you downloaded and click  Open     Set the  Type  correctly.    Click the  Start  button.    Once the progress bar reaches 100%, click the  Close  button    The file will now upload to your current history.", 
            "title": "Upload to Galaxy"
        }, 
        {
            "location": "/modules/data-dna/#galaxy-histories", 
            "text": "Galaxy history of input files   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy_history_input_files.tar.gz   Galaxy history: FastQC   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/FastQChistory.tar.gz   Galaxy history: Spades   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Spadeshistory.tar.gz   Galaxy history: Prokka   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Prokkahistory.tar.gz   Galaxy history: Snippy   https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Snippyhistory.tar.gz  To get the saved tutorial history (a set of files) into Galaxy:   Copy the link address.  Go to your Galaxy instance. Make sure you are registered and logged in. Refresh the page.  Click on the  History  cog   Select  Import from File     In the box called  Archived History URL , paste in the link address to the Galaxy history.  Click  Submit  Wait a few seconds.  Click on the  view all histories  button   See if the Galaxy history has been imported: it will be called  imported from archive: Data  Above that pane, click on the  Switch to  button.  Then click  Done  (in the top left corner).  You should now have a list of five files in your current history.", 
            "title": "Galaxy histories"
        }, 
        {
            "location": "/modules/velvet/", 
            "text": "Assembly using Velvet\n\n\nBackground\n\n\nVelvet is one of a number of \nde novo\n assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this \nlink\n.\n\n\n\n\n\nIn this activity, we will perform a \nde novo\n assembly of a short read set using the Velvet assembler.\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nassemble the reads using Velvet, and\n\n\nexamine the output assembly.\n\n\n\n\nImport and view data\n\n\n\n\n\nIf you don\nt already have the files in your current galaxy history, see \nhere\n for information on how to get them.\n\n\n\n\nThe read set for today is from an imaginary \nStaphylococcus aureus\n bacterium with a miniature genome.\n\n\n\n\nThe whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.\n\n\n\n\n\n\nThe files we need for assembly are the \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\n\n\n\n\n(We don\nt need the reference genome sequences for this tutorial).\n\n\n\n\n\n\nThe reads are paired-end.\n\n\n\n\n\n\nEach read is 150 bases long. \n\n\n\n\n\n\nThe number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button (the \n) next to one of the FASTQ sequence files.\n\n\n\n\n\n\n\nAssemble reads with Velvet\n\n\n\n\nWe will perform a \nde novo\n assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)\n\n\nVelvet requires the user to input a value of \nk\n for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity.\n\n\n\n\n\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Assembly \n velvet\n\n\n\n\nSet the following parameters (leave other settings as they are):\n\n\n\n\nK-mer\n: choose a value for k between 21 and 95\n\n\nInput file type\n: Fastq\n\n\nSingle or paired end reads\n: Paired\n\n\n Select first set of reads\n: \nmutant_R1.fastq\n  \n\n\n Select second set of reads\n: \nmutant_R2.fastq\n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\nExamine the output\n\n\n\n\nGalaxy is now running velvet on the reads for you.\n\n\nPress the refresh button in the history pane to see if it has finished.\n\n\n\n\nWhen it is finished, you will have three new files in your history.  \n\n\n\n\na \nContigs\n file\n\n\na \nContigs stats\n file\n\n\nthe velvet \nlog\n file\n\n\n\n\n\n\n\n\nClick on the View Data button \n on each of the files.\n\n\n\n\n\n\nThe \nContigs\n file will show each contig with the \nk-mer length\n and \nk-mer coverage\n listed as part of the header (however, these are just called \nlength\n and \ncoverage\n).\n\n\n\n\nK-mer length\n: For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length.\n\n\nK-mer coverage\n: For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly).\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nContigs stats\n file will show a list of these k-mer lengths and k-mer coverages.\n\n\n\n\n\n\n\n\nWe will summarise the information in the \nlog\n file.\n\n\nGo to \nBasic Tools \n NGS Common Toolsets \n FASTA manipulation \n Fasta statistics\n\n\nFor the required input file, choose the velvet \nContigs\n file.\n\n\nClick \nExecute\n.\n\n\nA new file will appear called \nFasta summary stats\n\n\nClick the eye icon to look at this file.\n\n\n\n\n\n\n\n\nLook at:\n\n\nnum_seq\n: the number of contigs in the FASTA file.\n\n\nnum_bp\n: the number of assembled bases. Roughly proportional to genome size.\n\n\nlen_max\n: the biggest contig.  \n\n\nlen_N50\n: N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger.", 
            "title": "Genome assembly with Velvet"
        }, 
        {
            "location": "/modules/velvet/#assembly-using-velvet", 
            "text": "", 
            "title": "Assembly using Velvet"
        }, 
        {
            "location": "/modules/velvet/#background", 
            "text": "Velvet is one of a number of  de novo  assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this  link .   In this activity, we will perform a  de novo  assembly of a short read set using the Velvet assembler.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/velvet/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   assemble the reads using Velvet, and  examine the output assembly.", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/velvet/#import-and-view-data", 
            "text": "If you don t already have the files in your current galaxy history, see  here  for information on how to get them.   The read set for today is from an imaginary  Staphylococcus aureus  bacterium with a miniature genome.   The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.    The files we need for assembly are the  mutant_R1.fastq  and  mutant_R2.fastq .    (We don t need the reference genome sequences for this tutorial).    The reads are paired-end.    Each read is 150 bases long.     The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).      Click on the View Data button (the  ) next to one of the FASTQ sequence files.", 
            "title": "Import and view data"
        }, 
        {
            "location": "/modules/velvet/#assemble-reads-with-velvet", 
            "text": "We will perform a  de novo  assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)  Velvet requires the user to input a value of  k  for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity.     Go to  Tools   NGS Analysis   NGS: Assembly   velvet   Set the following parameters (leave other settings as they are):   K-mer : choose a value for k between 21 and 95  Input file type : Fastq  Single or paired end reads : Paired   Select first set of reads :  mutant_R1.fastq      Select second set of reads :  mutant_R2.fastq     Your tool interface should look like this:      Click  Execute", 
            "title": "Assemble reads with Velvet"
        }, 
        {
            "location": "/modules/velvet/#examine-the-output", 
            "text": "Galaxy is now running velvet on the reads for you.  Press the refresh button in the history pane to see if it has finished.   When it is finished, you will have three new files in your history.     a  Contigs  file  a  Contigs stats  file  the velvet  log  file     Click on the View Data button   on each of the files.    The  Contigs  file will show each contig with the  k-mer length  and  k-mer coverage  listed as part of the header (however, these are just called  length  and  coverage ).   K-mer length : For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length.  K-mer coverage : For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly).       The  Contigs stats  file will show a list of these k-mer lengths and k-mer coverages.     We will summarise the information in the  log  file.  Go to  Basic Tools   NGS Common Toolsets   FASTA manipulation   Fasta statistics  For the required input file, choose the velvet  Contigs  file.  Click  Execute .  A new file will appear called  Fasta summary stats  Click the eye icon to look at this file.     Look at:  num_seq : the number of contigs in the FASTA file.  num_bp : the number of assembled bases. Roughly proportional to genome size.  len_max : the biggest contig.    len_N50 : N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/spades/", 
            "text": "Assembly using Spades\n\n\nBackground\n\n\nSpades is one of a number of \nde novo\n assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this \nlink\n.\n\n\n\n\n\nIn this activity, we will perform a \nde novo\n assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence.\n\n\n\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\n\n\n\nassemble the reads using Spades, and\n\n\nexamine the output assembly.\n\n\n\n\n\n\n\nImport and view data\n\n\n\n\n\nIf you don\nt already have the files in your current galaxy history, see \nhere\n for information on how to get them.\n\n\n\n\nThe read set for today is from an imaginary \nStaphylococcus aureus\n bacterium with a miniature genome.\n\n\n\n\nThe whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.\n\n\n\n\n\n\nThe files we need for assembly are the \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\n\n\n\n\n(We don\nt need the reference genome sequences for this tutorial).\n\n\n\n\n\n\nThe reads are paired-end.\n\n\n\n\n\n\nEach read is 150 bases long. \n\n\n\n\n\n\nThe number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button (the \n) next to one of the FASTQ sequence files.\n\n\n\n\n\n\n\nAssemble reads with Spades\n\n\n\n\nWe will perform a \nde novo\n assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)\n\n\n\n\n\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Assembly \n spades\n\n\n\n\nSet the following parameters (leave other settings as they are):\n\n\n\n\nRun only Assembly\n: \nYes\n [the \nYes\n button should be darker grey]\n\n\nKmers to use separated by commas:\n \n33,55,91\n  [note: no spaces]  \n\n\nCoverage cutoff:\n \nauto\n  \n\n\nFiles \n Forward reads:\n \nmutant_R1.fastq\n  \n\n\nFiles \n Reverse reads:\n \nmutant_R2.fastq\n  \n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\nExamine the output\n\n\n\n\nGalaxy is now running Spades on the reads for you.\n\n\n\n\nWhen it is finished, you will have five new files in your history.  \n\n\n\n\ntwo FASTA files of the resulting contigs and scaffolds\n\n\ntwo files for statistics about these\n\n\nthe Spades logfile\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the View Data button \n on each of the files.\n\n\nNote that the short reads have been assembled into much longer contigs.\n\n\n(However, in this case, the contigs have not been assembled into larger scaffolds.)\n\n\nThe stats files will give you the length of each of the contigs.", 
            "title": "Genome assembly with Spades"
        }, 
        {
            "location": "/modules/spades/#assembly-using-spades", 
            "text": "", 
            "title": "Assembly using Spades"
        }, 
        {
            "location": "/modules/spades/#background", 
            "text": "Spades is one of a number of  de novo  assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this  link .   In this activity, we will perform a  de novo  assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/spades/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:    assemble the reads using Spades, and  examine the output assembly.", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/spades/#import-and-view-data", 
            "text": "If you don t already have the files in your current galaxy history, see  here  for information on how to get them.   The read set for today is from an imaginary  Staphylococcus aureus  bacterium with a miniature genome.   The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.    The files we need for assembly are the  mutant_R1.fastq  and  mutant_R2.fastq .    (We don t need the reference genome sequences for this tutorial).    The reads are paired-end.    Each read is 150 bases long.     The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).      Click on the View Data button (the  ) next to one of the FASTQ sequence files.", 
            "title": "Import and view data"
        }, 
        {
            "location": "/modules/spades/#assemble-reads-with-spades", 
            "text": "We will perform a  de novo  assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)     Go to  Tools   NGS Analysis   NGS: Assembly   spades   Set the following parameters (leave other settings as they are):   Run only Assembly :  Yes  [the  Yes  button should be darker grey]  Kmers to use separated by commas:   33,55,91   [note: no spaces]    Coverage cutoff:   auto     Files   Forward reads:   mutant_R1.fastq     Files   Reverse reads:   mutant_R2.fastq        Your tool interface should look like this:      Click  Execute", 
            "title": "Assemble reads with Spades"
        }, 
        {
            "location": "/modules/spades/#examine-the-output", 
            "text": "Galaxy is now running Spades on the reads for you.   When it is finished, you will have five new files in your history.     two FASTA files of the resulting contigs and scaffolds  two files for statistics about these  the Spades logfile       Click on the View Data button   on each of the files.  Note that the short reads have been assembled into much longer contigs.  (However, in this case, the contigs have not been assembled into larger scaffolds.)  The stats files will give you the length of each of the contigs.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/prokka/", 
            "text": "Genome annotation using Prokka\n\n\nBackground\n\n\nIn this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous \ntutorial\n. Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.\n\n\nProkka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using \nProdigal\n; second, the \nfunction\n of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found \nhere\n.\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nload a genome assembly into Prokka\n\n\nannotate the assembly using Prokka\n\n\nexamine the annotated genome using JBrowse\n\n\n\n\nInput data\n\n\nProkka requires assembled contigs.\n\n\n\n\n\n\nIf you are continuing on from the previous workshop (\nAssembly with Spades\n), this file will be in your current history: \nSPAdes_contigs.fasta\n.\n\n\n\n\n\n\nAlternatively, download the assembled contigs from the \nTraining dataset page.\n\n\n\n\n\n\n\n\n\nRun Prokka\n\n\n\n\nIn Galaxy, go to \nTools \n NGS Analysis \n NGS: Annotation \n Prokka\n  \n\n\nSet the following parameters (leave everything else unchanged):\n\n\nContigs to annotate\n: \nSPAdes contigs (fasta)\n  \n\n\nLocus tag prefix (\nlocustag)\n: P\n\n\nForce GenBank/ENA/DDJB compliance (\ncompliant)\n: \nNo\n\n\nSequencing Centre ID (\ncentre)\n: V\n\n\nGenus Name\n: \nStaphylococcus\n  \n\n\nSpecies Name\n: \naureus\n  \n\n\nUse genus-specific BLAST database\n \nNo\n  \n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n  \n\n\n\n\nExamine the output\n\n\nFirst, enable \nScratchbook\n in Galaxy - this allows you to view several windows simultaneously. Click on the 3\n3 squares icon on the menu bar:\n\n\n\n\nOnce Prokka has finished, examine each of its output files.\n\n\n\n\nThe GFF and GBK files contain all of the information about the features annotated (in different formats.)\n\n\nThe \n.txt\n file contains a summary of the number of features annotated.\n\n\nThe \n.faa\n file contains the protein sequences of the genes annotated.\n\n\nThe \n.ffn\n file contains the nucleotide sequences of the genes annotated.\n\n\n\n\nView annotated features in JBrowse\n\n\nNow that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer.\n\n\n\n\n\n\nGo to \nStatistics and Visualisation \n Graph/Display Data \n JBrowse\n\n\n\n\n\n\nUnder \nFasta Sequence(s)\n choose \nProkka on data XX:fna\n. This sequence will be the reference against which annotations are displayed.\n\n\n\n\n\n\nFor \nProduce a Standalone Instance\n select \nYes\n.\n\n\n\n\n\n\nFor \nGenetic Code\n choose \n11: The Bacterial, Archaeal and Plant Plastid Code\n.\n\n\n\n\n\n\nClick \nInsert Track Group\n\n\n\n\n\n\nClick \nInsert Annotation Track\n\n\n\n\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\n\n\n\n\nFor \nGFF/GFF3/BED Track Data\n select \nProkka on data XX:gff\n  [Note: not wildtype.gff]\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\n\n\nA new file will be created, called \nJBrowse on data XX and data XX - Complete\n. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.\n\n\n\n\n\n\nUnder \nAvailable Tracks\n on the left, tick the box for \nProkka on data XX:gff\n.\n\n\n\n\n\n\nSelect contig 6 in the drop down box. You can only see one contig displayed at a time.\n\n\n\n\n\n\n\n\n\n\nUse the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right).\n\n\n\n\nZoomed out view:\n\n\n\n\nZoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation.\n\n\nZoomed in view:\n\n\n\n\n\n\nClick on a gene/feature annotation (the bars on the annotation track) to see more information.\n\n\ngene name\n\n\nproduct name\n\n\nyou can download the FASTA sequence by clicking on the disk icon.", 
            "title": "Genome annotation"
        }, 
        {
            "location": "/modules/prokka/#genome-annotation-using-prokka", 
            "text": "", 
            "title": "Genome annotation using Prokka"
        }, 
        {
            "location": "/modules/prokka/#background", 
            "text": "In this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous  tutorial . Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.  Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using  Prodigal ; second, the  function  of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found  here .", 
            "title": "Background"
        }, 
        {
            "location": "/modules/prokka/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   load a genome assembly into Prokka  annotate the assembly using Prokka  examine the annotated genome using JBrowse", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/prokka/#input-data", 
            "text": "Prokka requires assembled contigs.    If you are continuing on from the previous workshop ( Assembly with Spades ), this file will be in your current history:  SPAdes_contigs.fasta .    Alternatively, download the assembled contigs from the  Training dataset page.", 
            "title": "Input data"
        }, 
        {
            "location": "/modules/prokka/#run-prokka", 
            "text": "In Galaxy, go to  Tools   NGS Analysis   NGS: Annotation   Prokka     Set the following parameters (leave everything else unchanged):  Contigs to annotate :  SPAdes contigs (fasta)     Locus tag prefix ( locustag) : P  Force GenBank/ENA/DDJB compliance ( compliant) :  No  Sequencing Centre ID ( centre) : V  Genus Name :  Staphylococcus     Species Name :  aureus     Use genus-specific BLAST database   No        Your tool interface should look like this:    Click  Execute", 
            "title": "Run Prokka"
        }, 
        {
            "location": "/modules/prokka/#examine-the-output", 
            "text": "First, enable  Scratchbook  in Galaxy - this allows you to view several windows simultaneously. Click on the 3 3 squares icon on the menu bar:   Once Prokka has finished, examine each of its output files.   The GFF and GBK files contain all of the information about the features annotated (in different formats.)  The  .txt  file contains a summary of the number of features annotated.  The  .faa  file contains the protein sequences of the genes annotated.  The  .ffn  file contains the nucleotide sequences of the genes annotated.", 
            "title": "Examine the output"
        }, 
        {
            "location": "/modules/prokka/#view-annotated-features-in-jbrowse", 
            "text": "Now that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer.    Go to  Statistics and Visualisation   Graph/Display Data   JBrowse    Under  Fasta Sequence(s)  choose  Prokka on data XX:fna . This sequence will be the reference against which annotations are displayed.    For  Produce a Standalone Instance  select  Yes .    For  Genetic Code  choose  11: The Bacterial, Archaeal and Plant Plastid Code .    Click  Insert Track Group    Click  Insert Annotation Track    For  Track Type  choose  GFF/GFF3/BED/GBK Features    For  GFF/GFF3/BED Track Data  select  Prokka on data XX:gff   [Note: not wildtype.gff]    Your tool interface should look like this:     Click  Execute    A new file will be created, called  JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.    Under  Available Tracks  on the left, tick the box for  Prokka on data XX:gff .    Select contig 6 in the drop down box. You can only see one contig displayed at a time.      Use the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right).   Zoomed out view:   Zoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation.  Zoomed in view:    Click on a gene/feature annotation (the bars on the annotation track) to see more information.  gene name  product name  you can download the FASTA sequence by clicking on the disk icon.", 
            "title": "View annotated features in JBrowse"
        }, 
        {
            "location": "/modules/snippy/", 
            "text": "Variant calling with Snippy\n\n\nBackground\n\n\nVariant calling is the process of identifying differences between two genome samples.\nUsually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by \nvariant calling\n.\n\n\nLearning Objectives\n\n\n\n\nFind variants between a reference genome and a set of reads\n\n\nVisualise the SNP in context of the reads aligned to the genome\n\n\nDetermine the effect of those variants on genomic features\n\n\nUnderstand if the SNP is potentially affecting the phenotype\n\n\n\n\nPrepare reference\n\n\n\n\n\n\n\n\nFor variant calling, we need a reference genome that is of the same strain as the input sequence reads.\n\n\nFor this tutorial, our reference is the \nwildtype.gbk\n file and our reads are \nmutant_R1.fastq\n and \nmutant_R2.fastq\n.\n\n\nIf these files are not presently in your Galaxy history, import them from the \nTraining dataset page.\n\n\nCall variants with Snippy\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Variant Analysis \n snippy\n\n\nFor \nReference type\n select \nGenbank\n.\n\n\nThen for \nReference Genbank\n choose the \nwildtype.gbk\n file.\n\n\nFor \nSingle or Paired-end reads\n choose \nPaired\n.\n\n\nThen choose the first set of reads, \nmutant_R1.fastq\n and second set of reads, \nmutant_R2.fastq\n.\n\n\nFor \nCleanup the non-snp output files\n select \nNo\n.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n.\n\n\n\n\nExamine Snippy output\n\n\nFirst, enable \nScratchbook\n in Galaxy - this allows you to view several windows simultaneously. Click on the squares:\n\n\n\n\nFrom Snippy, there are 10 output files in various formats.\n\n\n\n\nGo to the file called \nsnippy on data XX, data XX and data XX table\n and click on the eye icon.\n\n\nWe can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion.\n\n\nLook at the third variant called. This is a T\nA mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation? \n\n\n\n\nView Snippy output in JBrowse\n\n\n\n\n\n\nGo to \nStatistics and Visualisation \n Graph/Display Data \n JBrowse\n\n\n\n\n\n\nUnder \nFasta Sequence(s)\n choose \nwildtype.fna\n. This sequence will be the reference against which annotations are displayed.\n\n\n\n\n\n\nFor \nProduce a Standalone Instance\n select \nYes\n.\n\n\n\n\n\n\nFor \nGenetic Code\n choose \n11: The Bacterial, Archaeal and Plant Plastid Code\n.\n\n\n\n\n\n\nWe will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff)\n\n\n\n\n\n\nTrack 1 - sequence reads\n\n\n\n\nClick \nInsert Track Group\n\n\nFor \nTrack Cateogry\n name it \nsequence reads\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nBAM Pileups\n\n\nFor \nBAM Track Data\n select \nthe snippy bam file\n\n\nFor \nAutogenerate SNP Track\n select \nYes\n\n\n\n\nTrack 2 - variants\n\n\n\n\nClick \nInsert Track Group\n again\n\n\nFor \nTrack Category\n name it \nvariants\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\nFor \nSNP Track Data\n select \nthe snippy snps gff file\n\n\n\n\nTrack 3 - annotated reference\n\n\n\n\nClick \nInsert Track Group\n again\n\n\nFor \n Track Category\n name it \nannotated reference\n\n\nClick \nInsert Annotation Track\n\n\nFor \nTrack Type\n choose \nGFF/GFF3/BED/GBK Features\n\n\nFor \nSNP Track Data\n select \nwildtype.gff\n\n\n\n\nUnder \nJBrowse Styling Options \n JBrowse style. description\n type in \nproduct,note,description\n\n\n\n\n\n\nClick \nExecute\n\n\n\n\n\n\nA new file will be created, called \nJBrowse on data XX and data XX - Complete\n. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.\n\n\n\n\n\n\nOn the left, tick boxes display the tracks\n\n\n\n\n\n\nUse the minus button to zoom out to see:\n\n\n\n\nsequence reads and their coverage (the grey graph)\n\n\n\n\n\n\n\n\nUse the plus button to zoom in to see:\n\n\n\n\nprobable real variants (a whole column of snps)\n\n\nprobable errors (single one here and there)\n\n\n\n\n\n\n\n\n\n\n\n\nIn the coordinates box, type in \n47299\n and then \nGo\n to see the position of the SNP discussed above.\n\n\nthe correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations.\n\n\nthe mutation of T \n A turns this triplet into TGA, a stop codon.", 
            "title": "Variant finding"
        }, 
        {
            "location": "/modules/snippy/#variant-calling-with-snippy", 
            "text": "", 
            "title": "Variant calling with Snippy"
        }, 
        {
            "location": "/modules/snippy/#background", 
            "text": "Variant calling is the process of identifying differences between two genome samples.\nUsually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by  variant calling .", 
            "title": "Background"
        }, 
        {
            "location": "/modules/snippy/#learning-objectives", 
            "text": "Find variants between a reference genome and a set of reads  Visualise the SNP in context of the reads aligned to the genome  Determine the effect of those variants on genomic features  Understand if the SNP is potentially affecting the phenotype", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/modules/snippy/#prepare-reference", 
            "text": "For variant calling, we need a reference genome that is of the same strain as the input sequence reads.  For this tutorial, our reference is the  wildtype.gbk  file and our reads are  mutant_R1.fastq  and  mutant_R2.fastq .  If these files are not presently in your Galaxy history, import them from the  Training dataset page.", 
            "title": "Prepare reference"
        }, 
        {
            "location": "/modules/snippy/#call-variants-with-snippy", 
            "text": "Go to  Tools   NGS Analysis   NGS: Variant Analysis   snippy  For  Reference type  select  Genbank .  Then for  Reference Genbank  choose the  wildtype.gbk  file.  For  Single or Paired-end reads  choose  Paired .  Then choose the first set of reads,  mutant_R1.fastq  and second set of reads,  mutant_R2.fastq .  For  Cleanup the non-snp output files  select  No .   Your tool interface should look like this:    Click  Execute .", 
            "title": "Call variants with Snippy"
        }, 
        {
            "location": "/modules/snippy/#examine-snippy-output", 
            "text": "First, enable  Scratchbook  in Galaxy - this allows you to view several windows simultaneously. Click on the squares:   From Snippy, there are 10 output files in various formats.   Go to the file called  snippy on data XX, data XX and data XX table  and click on the eye icon.  We can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion.  Look at the third variant called. This is a T A mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation?", 
            "title": "Examine Snippy output"
        }, 
        {
            "location": "/modules/snippy/#view-snippy-output-in-jbrowse", 
            "text": "Go to  Statistics and Visualisation   Graph/Display Data   JBrowse    Under  Fasta Sequence(s)  choose  wildtype.fna . This sequence will be the reference against which annotations are displayed.    For  Produce a Standalone Instance  select  Yes .    For  Genetic Code  choose  11: The Bacterial, Archaeal and Plant Plastid Code .    We will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff)    Track 1 - sequence reads   Click  Insert Track Group  For  Track Cateogry  name it  sequence reads  Click  Insert Annotation Track  For  Track Type  choose  BAM Pileups  For  BAM Track Data  select  the snippy bam file  For  Autogenerate SNP Track  select  Yes   Track 2 - variants   Click  Insert Track Group  again  For  Track Category  name it  variants  Click  Insert Annotation Track  For  Track Type  choose  GFF/GFF3/BED/GBK Features  For  SNP Track Data  select  the snippy snps gff file   Track 3 - annotated reference   Click  Insert Track Group  again  For   Track Category  name it  annotated reference  Click  Insert Annotation Track  For  Track Type  choose  GFF/GFF3/BED/GBK Features  For  SNP Track Data  select  wildtype.gff   Under  JBrowse Styling Options   JBrowse style. description  type in  product,note,description    Click  Execute    A new file will be created, called  JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.    On the left, tick boxes display the tracks    Use the minus button to zoom out to see:   sequence reads and their coverage (the grey graph)     Use the plus button to zoom in to see:   probable real variants (a whole column of snps)  probable errors (single one here and there)       In the coordinates box, type in  47299  and then  Go  to see the position of the SNP discussed above.  the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations.  the mutation of T   A turns this triplet into TGA, a stop codon.", 
            "title": "View Snippy output in JBrowse"
        }, 
        {
            "location": "/modules/pacbio/", 
            "text": "Assembly with PacBio data and SMRT Portal\n\n\nThis tutorial will show you how to assemble a bacterial genome \nde novo\n, using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.\n\n\n\n\n\nStart\n\n\n\n\nOpen your mGVL dashboard.\n\n\nYou should see SMRT Portal as one of the instance services on your GVL dashboard.\n\n\nOpen up the SMRT portal web link (to the right) and register/log on.\n\n\n\n\nInput\n\n\nWe will use a publicly available data-set of PacBio reads from the bacteria \nE. coli\n (reference link below).\n\n\nIf this has already been loaded onto SMRT portal (e.g. for use during a workshop), proceed to the next step (\nAssembly\n).\n\n\nOtherwise:\n\n\n\n\nLoad the PacBio data (your own, or the training \nE. coli\n dataset) onto your GVL.\n\n\nIn the SMRT Portal, go to \nDesign Job\n, the top left tab.\n\n\nGo to \nImport and Manage\n.\n\n\n\nClick \nImport SMRT cells\n.\n\n\n\nWork out where you put the data on your GVL, and make sure the file path is showing.\n\n\nIf not, click \nAdd\n and enter the file path to the data.\n\n\n\n\n\n\nClick on the file path and then \nScan\n to check for new data.\n\n\n\n\nAssembly\n\n\n\n\nIn the SMRT Portal, go to the top left tab, \nDesign Job\n.\n\n\nGo to \nCreate New\n.\n\n\nAn \nAnalysis\n window should appear. Check the box next to \nDe novo assembly\n, then \nNext\n.\n\n\nUnder \nJob Name\n enter a name.\n\n\nUnder \nProtocols\n choose \nRS_HGAP_Assembly.3\n.\n\n\nThere is an ellipsis underneath \nProtocols\n - click on the ellipsis.\n\n\n\n\n\n\nThis brings up the settings. Click on \nAssembly\n.\n\n\n\n\nFor \nCompute Minimum Seed Read Length\n: ensure box is ticked\n\n\nFor \nNumber of Seed Read Chunks\n: enter \n12\n\n\nChange the \nGenome Size\n to an approximately correct size for the species. For \nE. coli\n, enter 4600000.\n\n\nFor \nTarget Coverage\n: enter \n10\n\n\nFor \nOverlapper Error Rate\n: enter \n0.04\n\n\nLeave all other settings as they are.\n\n\nClick \nApply\n\n\n\n\nYour protocol window should look like this:\n\n\n\n\n\n\n\n\nClick \nOk\n.  \n\n\n\n\n\n\nIn the \nSMRT Cells Available\n window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.\n\n\n\n\n\n\n\n\n\n\nClick \nSave\n (bottom right hand side).\n\n\nNext to \nSave\n, click \nStart\n.\n\n\nThe \nMonitor Jobs\n window should open.\n\n\nAs each step proceeds, new items will appear under the \nReports\n and \nData\n tabs on the left.\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nClick on the top right tab, \nView Data\n.\n\n\n\n\nDouble click on the job name to open its reports.\n\n\nClick on different \nReports\n in the left hand panel.\n\n\n\n\n[add screenshot for reports overview]\n\n\nThings to look at:\n\n\nGeneral: Filtering (polymerase reads)\n\n\n\n\nnumber of reads post-filter\n\n\nread length (=average)\n\n\n\n\nGeneral: Subread Filtering (subreads)\n\n\n\n\nnumber of reads post-filter\n\n\nread length (average)\n\n\n\n\nAssembly: Pre-Assembly (pre-assembled reads)\n\n\n\n\nlength cutoff (the computed minimum seed read length)\n\n\nread length (average)\n\n\n\n\nAssembly: Corrections\n\n\nConsensus calling results:\n\n\n\n\nConsensus concordance should be \n 99%.\n\n\n\n\nGraph: corrections across reference:\n\n\n\n\nWith the first run of polishing, expect a lot of corrections but they should be randomly distributed.\n\n\n\n\nAssembly: Top Corrections\n\n\nThis is a list of all the corrections made.\n\n\n\n\nIf more than two corrections (with confidence \n 50), repeat polishing (see next section \nFurther polishing\n).\n\n\n\n\nResequencing: Coverage\n\n\nCoverage across reference:\n\n\n\n\ndiscard contigs \n20X coverage\n\n\nothers should have fairly consistent coverage.\n\n\nspikes could be collapsed repeats.\n\n\nvalleys could be mis-assembly - e.g. draft assembly was incorrect and so remapped reads didn\nt support this part of the assembly.\n\n\n\n\nGraph: Depth of Coverage:\n\n\nNumber\n of reference regions vs coverage. Should be roughly normal?\n\n\nAssembly: Polished Assembly\n\n\n\n\nnumber of contigs\n\n\nmax contig length\n\n\ngraph: confidence vs depth. multi-copy plasmids may have higher coverage.\n\n\n\n\nFurther Polishing\n\n\nDuring polishing, raw reads are used to correct the assembly.\nDuring HGAP, the assembly was polished once but may need further corrections.\n\n\n\n\nFrom the previous step, Go to \nData \n Assembly \n Polished Assembly\n and download the FASTA file by clicking on it.\n\n\nUnzip the .gz file\n\n\n\n\n\n\nGo to \nDesign Job \n Import and Manage\n and click \nNew\n on the bottom right hand side. Then, select that FASTA assembly file to upload.\n\n\ncreates a new reference.\n\n\n\n\n\n\nGo to \nDesign Job \n Create New\n\n\nchoose reference-based\n\n\nSelect protocol: RS_Resequencing.1\n\n\nLeave all settings.\n\n\nSelect your reference from the drop down menu.\n\n\nClick \nSave\n and \nStart\n.\n\n\n\n\n\n\nExamine the output assembly and repeat if necessary (e.g. if \n 2 corrections with \n50 confidence).\n\n\n\n\nOutput\n\n\nPolished Assembly FASTA file\n\n\n=\n download to local computer; or\n\n\n=\n open file in (GVL) Galaxy (TBA); or\n\n\n=\n open file in GVL command line: and further analysis.\n\n\nNext\n\n\nFurther options:\n\n\n\n\ncorrect with Illumina reads\n\n\ncircularise\n\n\nannotate\n\n\n\n\nLinks to more information\n\n\nPacBio \nE. coli\n data set\n\n\nHGAP overview\n\n\nA full ist of reports and terminology\n\n\nVideo overview of HGAP on SMRT portal\n\n\nMore about the SMRT bell template", 
            "title": "Assembly with SMRT portal"
        }, 
        {
            "location": "/modules/pacbio/#assembly-with-pacbio-data-and-smrt-portal", 
            "text": "This tutorial will show you how to assemble a bacterial genome  de novo , using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.", 
            "title": "Assembly with PacBio data and SMRT Portal"
        }, 
        {
            "location": "/modules/pacbio/#start", 
            "text": "Open your mGVL dashboard.  You should see SMRT Portal as one of the instance services on your GVL dashboard.  Open up the SMRT portal web link (to the right) and register/log on.", 
            "title": "Start"
        }, 
        {
            "location": "/modules/pacbio/#input", 
            "text": "We will use a publicly available data-set of PacBio reads from the bacteria  E. coli  (reference link below).  If this has already been loaded onto SMRT portal (e.g. for use during a workshop), proceed to the next step ( Assembly ).  Otherwise:   Load the PacBio data (your own, or the training  E. coli  dataset) onto your GVL.  In the SMRT Portal, go to  Design Job , the top left tab.  Go to  Import and Manage .  Click  Import SMRT cells .  Work out where you put the data on your GVL, and make sure the file path is showing.  If not, click  Add  and enter the file path to the data.    Click on the file path and then  Scan  to check for new data.", 
            "title": "Input"
        }, 
        {
            "location": "/modules/pacbio/#assembly", 
            "text": "In the SMRT Portal, go to the top left tab,  Design Job .  Go to  Create New .  An  Analysis  window should appear. Check the box next to  De novo assembly , then  Next .  Under  Job Name  enter a name.  Under  Protocols  choose  RS_HGAP_Assembly.3 .  There is an ellipsis underneath  Protocols  - click on the ellipsis.    This brings up the settings. Click on  Assembly .   For  Compute Minimum Seed Read Length : ensure box is ticked  For  Number of Seed Read Chunks : enter  12  Change the  Genome Size  to an approximately correct size for the species. For  E. coli , enter 4600000.  For  Target Coverage : enter  10  For  Overlapper Error Rate : enter  0.04  Leave all other settings as they are.  Click  Apply   Your protocol window should look like this:     Click  Ok .      In the  SMRT Cells Available  window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.      Click  Save  (bottom right hand side).  Next to  Save , click  Start .  The  Monitor Jobs  window should open.  As each step proceeds, new items will appear under the  Reports  and  Data  tabs on the left.", 
            "title": "Assembly"
        }, 
        {
            "location": "/modules/pacbio/#output", 
            "text": "Click on the top right tab,  View Data .   Double click on the job name to open its reports.  Click on different  Reports  in the left hand panel.   [add screenshot for reports overview]  Things to look at:  General: Filtering (polymerase reads)   number of reads post-filter  read length (=average)   General: Subread Filtering (subreads)   number of reads post-filter  read length (average)   Assembly: Pre-Assembly (pre-assembled reads)   length cutoff (the computed minimum seed read length)  read length (average)   Assembly: Corrections  Consensus calling results:   Consensus concordance should be   99%.   Graph: corrections across reference:   With the first run of polishing, expect a lot of corrections but they should be randomly distributed.   Assembly: Top Corrections  This is a list of all the corrections made.   If more than two corrections (with confidence   50), repeat polishing (see next section  Further polishing ).   Resequencing: Coverage  Coverage across reference:   discard contigs  20X coverage  others should have fairly consistent coverage.  spikes could be collapsed repeats.  valleys could be mis-assembly - e.g. draft assembly was incorrect and so remapped reads didn t support this part of the assembly.   Graph: Depth of Coverage:  Number  of reference regions vs coverage. Should be roughly normal?  Assembly: Polished Assembly   number of contigs  max contig length  graph: confidence vs depth. multi-copy plasmids may have higher coverage.", 
            "title": "Output"
        }, 
        {
            "location": "/modules/pacbio/#further-polishing", 
            "text": "During polishing, raw reads are used to correct the assembly.\nDuring HGAP, the assembly was polished once but may need further corrections.   From the previous step, Go to  Data   Assembly   Polished Assembly  and download the FASTA file by clicking on it.  Unzip the .gz file    Go to  Design Job   Import and Manage  and click  New  on the bottom right hand side. Then, select that FASTA assembly file to upload.  creates a new reference.    Go to  Design Job   Create New  choose reference-based  Select protocol: RS_Resequencing.1  Leave all settings.  Select your reference from the drop down menu.  Click  Save  and  Start .    Examine the output assembly and repeat if necessary (e.g. if   2 corrections with  50 confidence).", 
            "title": "Further Polishing"
        }, 
        {
            "location": "/modules/pacbio/#output_1", 
            "text": "Polished Assembly FASTA file  =  download to local computer; or  =  open file in (GVL) Galaxy (TBA); or  =  open file in GVL command line: and further analysis.", 
            "title": "Output"
        }, 
        {
            "location": "/modules/pacbio/#next", 
            "text": "Further options:   correct with Illumina reads  circularise  annotate", 
            "title": "Next"
        }, 
        {
            "location": "/modules/pacbio/#links-to-more-information", 
            "text": "PacBio  E. coli  data set  HGAP overview  A full ist of reports and terminology  Video overview of HGAP on SMRT portal  More about the SMRT bell template", 
            "title": "Links to more information"
        }, 
        {
            "location": "/modules/cmdline_assembly/", 
            "text": "PacBio reads: assembly with command line tools\n\n\nThis tutorial demonstrates how to use long sequence reads to assemble a bacterial genome.\n\n\nLearning objectives\n\n\nAt the end of this tutorial, be able to use command line tools to:\n\n\n\n\nassemble long (PacBio) sequence reads\n\n\ntrim overhang\n\n\ncorrect the draft assembly with short (Illumina) reads\n\n\ncircularise the corrected assembly\n\n\n produce a finished assembly.\n\n\n\n\nInput files\n\n\n\n\nOpen the mGVL command line\n\n\nNavigate to the directory in which you want to work.\n\n\nMake a directory called \nstaph\n\n\n\n\nmkdir staph\ncd staph\n\n\n\n\n\n\nMake a subdirectory with the sample name \n25745\n\n\n\n\nmkdir 25745\ncd 25745\n\n\n\n\nFind the PacBio files for this sample\n\n\n\n\nObtain the input files. e.g. from the BPA portal.\n\n\nPacBio files are often stored in the format:\nSample_name/Cell_name/Analysis_Results/long_file_name_1.fastq.gz\n\n\nWe will use the \nfastq.gz\n files.\n\n\nThe reads are usually split into three separate files because they are so large.\n\n\n\n\nRight click on the first \nsubread.fastq.gz\n file and \ncopy link address\n.\n\n\n\n\n\n\nIn the command line, type:\n\n\n\n\n\n\nwget --user username --password password [paste link URL for file]\n\n\n\n\n\n\nrepeat for the other two \nsubread.fastq.gz\n files.\n\n\n\n\nJoin PacBio fastq files\n\n\n\n\nIf the files are gzipped, type:\n\n\n\n\ncat filepath/filep0.*.subreads.fastq.gz \n subreads.fastq.gz\n\n\n\n\n\n\nIf the files are not gzipped, type:\n\n\n\n\ncat filepath/filep0.*.subreads.fastq | gzip \n subreads.fastq.gz\n\n\n\n\n\n\nWe now have a file called \nsubreads.fastq.gz\n.\n\n\n\n\nFind the Illumina files for this sample\n\n\n\n\nWe will also use 2 x Illumina (Miseq) fastq.gz files.\n\n\nThese are the \nR1.fastq.gz\n and \nR2.fastq.gz\n files.\n\n\nRight click on the file name and \ncopy link address\n.\n\n\nIn the command line, type:\n\n\n\n\nwget --user username --password password [paste link URL for file]\n\n\n\n\n\n\nRepeat for the other read.fastq.gz file.\n\n\nShorten the name of each of these files:\n\n\n\n\nmv longfilename_R1.fastq.gz R1.fastq.gz\nmv longfilename_R2.fastq.gz R2.fastq.gz\n\n\n\n\nView files\n\n\n\n\nType \nls\n to display the folder contents.\n\n\n\n\nls\n\n\n\n\n\n\nThe 3 files we will use in this analysis are:\n\n\nsubreads.fastq.g\n (the PacBio reads)\n\n\nR1.fastq.gz\n and \nR2.fastq.gz\n (the Illumina reads)\n\n\n\n\n\n\n\n\nAssemble with Canu\n\n\n\n\nRun canu with these commands:\n\n\n\n\ncanu -p staph -d staph_outdir corMhapSensitivity=high corMinCoverage=0 genomeSize=2.8m -pacbio-raw subreads.fastq\n\n\n\n\n\n\nstaph\n is the prefix given to output files\n\n\nstaph_outdir\n is the output directory\n\n\ncorMhapSensitivity\n and \ncorMinCoverage\n is a recommended option for sensitivity\n\n\n\n\ngenomeSize\n only has to be approximate. e.g., for staph, 2.8M.\n\n\n\n\n\n\nNote: it may say \nFinished\n  but it is probably still running. Type:\n\n\n\n\n\n\nsqueue\n\n\n\n\n\n\n\n\nThis will show you what is running.\n\n\n\n\n\n\nCanu will correct, trim and assemble the reads.\n\n\n\n\nThis will take ~ 30 minutes.\n\n\n\n\nCheck the output\n\n\ncd staph_outdir\n\n\n\n\n\n\nThe \ncontigs.fasta\n are the assembled sequences.\n\n\nThe \nunassembled.fasta\n are the reads that could not be assembled.\n\n\nThe \nfile.gfa\n is the graph of the assembly.\n\n\nDisplay summary information about the contigs:\n\n\n\n\nfa -f staph.contigs.fasta\n\n\n\n\n\n\n\n\nThere are two contigs. Note down their lengths: 2,725,231 and 43,991\n\n\nWe will split these into two separate fasta files.\n\n\n\n\nSeparate the contigs into single files\n\n\n\n\nIndex the contigs file:\n\n\n\n\nsamtools faidx staph.contigs.fasta\n\n\n\n\n\n\n\n\nthis makes an indexed file with the suffix -fai\n\n\n\n\n\n\nsend each contig to a new file:\n\n\n\n\n\n\nsamtools faidx staph.contigs.fasta tig00000000 \n contig1.fa\nsamtools faidx staph.contigs.fasta tig00000001 \n contig2.fa\n\n\n\n\n\n\nchange contig names:\n\n\n\n\nnano filename.fa\n\n\n\n\n\n\nchange header to contig1 or contig2\n\n\nsave\n\n\nWe now have two files:\n\n\ncontig1.fa\n\n\ncontig2.fa\n\n\n\n\n\n\n\n\n\n\n\nAlternatives for assembly\n\n\n\n\ncanu without sensitivity settings\n\n\nHGAP2\n\n\n\n\nUse Quiver/Arrow here?\n\n\nto correct assembly with the raw reads.\n\n\nTrim overhang in chromosome 1\n\n\nChromosome 1 is in the \ncontig1.fa\n file.\n\n\nThe canu assembly graph will be split at an ambiguous/unstable node. However, this area of the graph likely overlaps in the bacterial chromosome, but has not aligned with itself completely. This is called an overhang. We need to identify these overhangs and trim them, for the chromosome and any plamsids.\n\n\n\n\nTake the first 30,000 bases of contig1.\n\n\n\n\nhead -n 501 contig1.fa \n contig1.fa.head\n\n\n\n\n\n\nthis is the start of the assembly\n\n\nwe want to see if it matches the end (overhang)\n\n\nformat the assembly file for blast:\n\n\n\n\nformatdb -i contig1.fa -p F\n\n\n\n\n\n\nblast the start of the assembly (.head file) against all of the assembly:\n\n\n\n\nblastall -p blastn -i contig1.fa.head -d contig1.fa -e 1e-10 -F F -o contig1.bls\n\n\n\n\n\n\nlook at \ncontig1.bls\n to see hits:\n\n\n\n\nless contig1.bls\n\n\n\n\n\n\nThe first hit is against the start of the chromosome, as expected.\n\n\nThis position, near the end of the contig, is where the overhang starts: position 2725159\n\n\n\n\n\n\n\n\ncheck that this match goes to the end of the contig: 2725231 - yes.\n\n\nwe will now trim the contig\n\n\nfirst, index the \ncontig1.fa\n file\n\n\n\n\nsamtools faidx contig1.fa\n\n\n\n\n\n\nthis makes an index file called \ncontig1.fa.fai\n\n\nnext, extract all the sequence except for the overhang. (We don\nt have to specify the name of the \nindex\n file; it will be found automatically):\n\n\n\n\nsamtools faidx contig1.fa tig00000000:1-2725158 \n contig1.fa.trimmed\n\n\n\n\n\n\nopen the \ncontig1.fa.trimmed\n file\n\n\n\n\nnano contig1.fa.trimmed\n\n\n\n\n\n\ndelete the header info except contig name (e.g. tig00000000)\nexit.\n\n\nwe now have a trimmed contig1.\n\n\n\n\nInvestigate the plasmid\n\n\n\n\nContig 2 is 43,991 bases.\n\n\nThis seems long for a plasmid in this species.\n\n\nDo a dot plot to examine the sequence.\n\n\n\n\nTransfer file to local computer\n\n\n\n\nUse Cyberduck to copy \ncontig2.fa\n to your local computer\n\n\nInstall Cyberduck\n\n\nOpen Cyberduck\n\n\nclick on \nopen connection\n\n\nchoose SFTP from drop down menu\n\n\nserver = your virtual machine IP address (e.g. abrpi.genome.edu.au)\n\n\nusername = your username\n\n\npassword = your password\n\n\nYou should now see a window showing the folders and files on your virtual machine.\n\n\nYou can drag and drop files into the preferred folder.\n\n\n\n\n\n\n\n\nView dot plot\n\n\n\n\nInstall Gepard\n\n\nOpen Gepard\n\n\nSequences - sequence 1 - select file - \ncontig2.fa\n\n\nSequences - sequence 2 - select file - \ncontig2.fa\n\n\nCreate dotplot\n\n\n\n\n\n\n\n\nthe sequence starts to repeat at position ~ 24850\n\n\nthere are probably two plasmids combined into one contig in tandem.\n\n\nthe whole length is 43,991\n\n\nwe will cut 9000 from each end\n\n\nuse samtools to extract the region of the contig except for 9k on each end\n\n\n\n\nsamtools faidx contig2.fa\nsamtools faidx contig2.fa tig00000001:9000-35000 \n contig2.fa.half\n\n\n\n\n\n\nwe now have a ~ 26000 bases plasmid\n\n\n\n\nnano contig2.fa.half\n\n\n\n\n\n\ndelete the rest of the name after tig00000001\n\n\n\n\nTrim overhang in the plasmid\n\n\ncontig 2.\n\n\nTake the first x bases:\n\n\nhead -n 10 contig2.fa.half \n contig2.fa.half.head\n\n\n\n\n\n\nthis is the start of the assembly\n\n\nwe want to see if it matches the end (overhang)\n\n\nformat the assembly file for blast:\n\n\n\n\nformatdb -i contig2.fa.half -p F\n\n\n\n\n\n\nblast the start of the assembly against all of the assembly:\n\n\n\n\nblastall -p blastn -i contig2.fa.half.head -d contig2.fa.half -e 1e-3 -F F -o contig2.bls\n\n\n\n\n\n\nlook at contig2.bls to see hits:\n\n\n\n\nless contig2.bls\n\n\n\n\n\n\nThe first hit is against the start of the chromosome, as expected.\n\n\nThe last hit starts at position 24885.\n\n\n\n\nWe will trim the plasmid to position 24884\n\n\n\n\n\n\nfirst, index the contig2.fa.half file\n\n\n\n\n\n\nsamtools faidx contig2.fa.half\n\n\n\n\n\n\ntrim\n\n\n\n\nsamtools faidx contig2.fa.half tig00000001:1-24884 \n contig2.fa.half.trimmed\n\n\n\n\n\n\nopen the contig2.fa.half.trimmed file\n\n\n\n\nnano contig2.fa.half.trimmed\n\n\n\n\n\n\n\n\ndelete the header info except contig name (e.g. tig00000000)\nexit.\n\n\n\n\n\n\nwe now have a trimmed contig2.\n\n\n\n\n\n\nCombine contigs 1 and 2\n\n\ntake chr and plasmid =\n one fasta file\n\n\ncat contig1.fa.trimmed contig2.fa.half.trimmed \n contig_1_2.fa\n\n\n\n\nfa -f contig_1_2.fa\n\n\n\n\nLook for smaller plasmids\n\n\n\n\nMake directory and move in combined contigs file and the illumina reads\n\n\n\n\ncp contig_1_2.fa ../\n\ncd ..\n\nmkdir find_contig_3\n\ncp contig_1_2.fa R1.fastq.gz R2.fastq.gz find_contig_3/\n\n cd find_contig_3\n\n\n\n\nAlign Illumina with BWA\n\n\n\n\nAlign illumina reads to these contigs\n\n\nFirst, index the contigs file\n\n\n\n\nbwa index contig_1_2.fa\n\n\n\n\n\n\nthen, align using bwa mem\n\n\n\n\nbwa mem -t 8 contig_1_2.fa R1.fastq.gz R2.fastq.gz | samtools sort \n aln.bam\n\n\n\n\n\n\n\nthe output alignment is \naln.bam\n\n\n\n\nOr align with bowtie2\n\n\nAdd info here\n\n\nExtract unmapped illlumina reads\n\n\n\n\nIndex the alignment file\n\n\n\n\nsamtools index aln.bam\n\n\n\n\n\n\n\nextract the fastq files from the bam alignment - those reads that were unmapped to the pacbio alignment.\n\n\n\n\nsamtools fastq -f 4 -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq aln.bam\n\nls -l # check R1 and R2 are approx same size\n\nhead unmapped.R* #check first reads have same name in R1 and R2\n\nhead unmapped.R1.fastq unmapped.R2.fastq\n\n\n\n\n\n\n\nwe now have three files of the unampped reads\n\n\n\n\nAssemble the unmapped reads\n\n\n\n\nassemble with spades\n\n\n\n\nspades.py -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq -o spades_assembly\n\n\n\n\n-1 is input file forward\n-2 is input file reverse\n-s is unpaired\n-o is output_dir\n\n\ncd spades_assembly\n\nfa scaffolds.fasta\n\n\n\n\n\n\n\n\nshows how many assembled:\n\n\n\n\ne.g. no=136\n\n\nmax = 2229\n\n\n\n\n\n\n\n\nsort fasta by size of seqs:\n\n\n\n\n\n\nsizeseq\nInput sequence set: scaffolds.fasta\nReturn longest sequence first [N]: Y\noutput sequence(s) [scaffolds.fasta]: sorted_scaffolds.fasta\ngrep cov sorted_scaffolds.fasta  #just print the first row of each seq to see coverage\n\n\n\n\n\n\n\n\nresult: NODE_1_length_2229_cov_610.033\n\n\n\n\nlongest contig is 2229 and high coverage\n\n\n\n\n\n\n\n\nall the nodes are listed\n\n\n\n\nsee if any other ones have high coverage\n\n\ne.g. \nNODE_136_length_78_cov_579\n\n\n\n\n\n\nlook at the sequence of this contig:\n\n\n\n\ntail sorted_scaffolds.fasta\n\n\n\n\n\n\n\n\nseq looks bad for node136 so disregard (seq is only Cs)\n\n\n\n\n\n\nwe will extract the first seq\n\n\n\n\n\n\nsamtools faidx sorted_scaffolds.fasta\nsamtools faidx sorted_scaffolds.fasta NODE_1_length_2229_cov_610.033 \n contig3.fa\n\n\n\n\n\n\nthis is now saved as \ncontig3.fa\n\n\n\n\nInvestigate the small plasmid (contig3)\n\n\n\n\nblast start of contig3 against itself\n\n\nTake the first x bases:\n\n\n\n\nhead -n 10 contig3.fa \n contig3.fa.head\n\n\n\n\n\n\nthis is the start of the assembly\n\n\nwe want to see if it matches the end (overhang)\n\n\nformat the assembly file for blast:\n\n\n\n\nformatdb -i contig3.fa -p F\n\n\n\n\n\n\nblast the start of the assembly against all of the assembly:\n\n\n\n\nblastall -p blastn -i contig3.fa.head -d contig3.fa -e 1e-3 -F F -o contig3.bls\n\n\n\n\n\n\nlook at contig3.bls to see hits:\n\n\n\n\nless contig3.bls\n\n\n\n\n\n\nthe first hit is against itself, as expected\n\n\nthere are a few further hits to small sections, but none to the end, so we assume there is no overhang that needs trimming.\n\n\n\n\nhowever, the sequence is likely then to be longer than this.\n\n\n\n\n\n\ncopy the sequence:\n\n\n\n\n\n\nless contig3.fa\n\n\n\n\n\n\ncopy the sequence\n\n\ngo to ncbi blast\n\n\nnuc to protein\n\n\npaste seq\n\n\nchoose genetic code = 11\n\n\nblast\n\n\nhits: replication protein\n\n\nso this is a protein that has not been found in the pacbio assembly.\n\n\nhypothesise that  this might be a true small plasmid but the rest of its seq is in common with other parts of the staph genome, so they haven\nt been assembled with the rep protein\n\n\n\n\nAssemble \nall\n the illumina reads\n\n\n\n\nassemble all the illumina reads with spades (not just those reads unmapped to pacbio assembly)\n\n\nresulting assembly: search for small plasmid sequence\n\n\nuse spades-fast on MDU server\n\n\nmkdir\n\n\nwget illumina reads\n\n\nrun spades-fast:\n\n\n\n\nspades-fast --R1 file --R2 file --gsize 2.8M --outdir spades_fast --cpus 32\n\n\n\n\ncd spades_fast\n\n\n\n\n\n\nin here is the \nassembly_graph.fastg\n\n\nuse cyberduck to transfer this file to local computer\n\n\nExamine the assembly in the program Bandage.\n\n\nInstall Bandage.\n\n\nFile: Load graph: \nfile.gfa\n\n\nIn the left hand panel, click \nDraw graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsee: main chromosome, plasmid, small plasmid (annotate pic)\n\n\n\n\n\n\nblast the small plasmid sequence in this assembly\n\n\n\n\nleft hand panel: Blast: create/view BLAST search\n\n\nbuild blast database\n\n\npaste in nuc seq of contig3\n\n\n\n\nblast\n\n\n\n\n\n\nthe main hit is around node 10\n\n\n\n\n\n\n\ngo to bandage window\n\n\n\n\nfind nodes\n in right hand panel - 10\n\n\nthis node is slightly longer: 2373\n\n\nthis could be the plasmid\n\n\nfind the sequence: NODE_10\n\n\nextract this seq\n\n\nthis is called NODE_10 in bandage but in the assembly_graph.fastg file it is called EDGE_10\n\n\ngo to the folder for spades_fast\n\n\n\n\nless contigs.fasta\n/2373\n\n\n\n\n\n\nsearch for length of this node\n\n\nsee that this is actually called NODE_11_length_2373_cov_417.492\n\n\nextract out node 11\n\n\n\n\nsamtools faidx contigs.fasta\nsamtools faidx contigs.fasta NODE_11_length_2373_cov_417.492 \n contig3b.fa\n\n\n\n\n\n\nwe will call it contig 3 \nb\n because it is larger than our original contig3.\n\n\nopen it - copy the seq\n\n\nmove this file back to sepsis abrpi machine:\n\n\nopen a nano file: nano contig3a.fa\n\n\npaste the seq  \n\n\nsave\n\n\n\n\n\n\n\n\nTrim small plasmid\n\n\n\n\nnext: check for overhang\n\n\nTake the first x bases:\n\n\n\n\nhead -n 10 contig3b.fa \n contig3b.fa.head\n\n\n\n\n\n\nthis is the start of the assembly\n\n\nwe want to see if it matches the end (overhang)\n\n\nformat the assembly file for blast:\n\n\n\n\nformatdb -i contig3b.fa -p F\n\n\n\n\n\n\nblast the start of the assembly against all of the assembly:\n\n\n\n\nblastall -p blastn -i contig3b.fa.head -d contig3b.fa -e 1e-3 -F F -o contig3b.bls\n\n\n\n\n\n\nlook at contig3b.bls to see hits:\n\n\n\n\nless contig3b.bls\n\n\n\n\n\n\nThe first hit is against the start of the chromosome, as expected.\n\n\nThe last hit starts at position 2253\n\n\nWe will trim the plasmid to position 2252\n\n\nfirst, index the contig3b.fa file\n\n\n\n\nsamtools faidx contig3b.fa\n\n\n\n\n\n\ntrim\n\n\n\n\nsamtools faidx contig3b.fa contig3b:1-2252 \n contig3b.fa.trimmed\n\n\n\n\n\n\nopen the contig3b.fa.trimmed\n\n\n\n\nnano contig3b.fa.trimmed\n\n\n\n\n\n\ndelete the header info except contig name (e.g. contig3b)\nexit.\n\n\nwe now have a trimmed contig3b.\n\n\n\n\nCollect all contigs in one file\n\n\n\n\nmove up to main analysis folder\n\n\nmkdir pilon\n\n\ncopy the trimmed contigs 1, 2, 3b into this folder\n\n\ncat them\n\n\n\n\ncat contig_1_2.fa contig3b.fa.trimmed \n all_contigs.fa\n\nfa -f all_contigs.fa\n\n\n\n\n\n\nsee the three contigs and sizes\n\n\nrename all the contigs\n\n\ncontig1\n\n\ncontig2\n\n\ncontig3b\n\n\n\n\nCorrect with Pilon\n\n\nCanu doesn\nt do any polishing, so there will be thousands of errors, almost all insertions.\n\n\nWe will use the illumina reads to correct the pacbio assembly.\n\n\n\n\n\n\ninputs:\n\n\n\n\ndraft pacbio assembly (overhang trimmed from each of the three replicons)\n\n\nillumina reads (aligned to pacbio assembly: in bam format)\n\n\n\n\n\n\n\n\noutput: corrected assembly\n\n\n\n\n\n\nAlign Illumina reads =\n bam\n\n\n\n\nmight have already been done above\n\n\n\n\nbwa index contigs.fasta\nbwa mem -t 8 contigs.fasta r1s r2s | samtools sort \n aln.bam\nsamtools index aln.bam\nsamtools faidx contigs.fasta\n\n\n\n\n\n\n-t is the number of cores (e.g. 8)\n\n\nto find out how many you have, grep -c processor /proc/cpuinfo\n\n\n\n\nCorrect\n\n\n\n\n\n\n\nrun pilon:\n\n\n\n\npilon --genome all_contigs.fa --frags all_aln.bam --output corrected --fix bases --changes --threads 8 --verbose\n\n\n\n\n\n\nlook at the output file called .pilon.fasta\n\n\ncompared to input file, this one could be longer\n\n\n\n\n\n\nlook at the changes file\n\n\n\n\nless corrected.changes\n\n\n\n\n\n\na lot are single, but there are some bigger ones.\n\n\ne.g. at position 2,463,699 there is a 23-bp seq that is deleted.\n\n\n\n\n\n\n\n\nView the deletion in a pileup\n\n\ntig00000000:2463600-2463622 tig00000000_pilon:2463699 GTTAAAGGTTATTTGAATGATCA .\n\n\n\n\nview the illumina reads mapped against the original assembly:\n\n\n\n\nsamtools tview -p tig00000000:2463600 aln.bam all_contigs.fa\n\n\n\n\n\n\n-p gives the chromosome position that we want to view\n\n\nthen input file; then reference file\n\n\n\n\nview:\n- reference sequence along the top\n- then consensus from the aligned illumina reads\n- a dot is a match on F\n- a comma is a match on R\n- capital letter is a correction on F\n- small letter is a correction on R\n- asterisk\n- underlining\n\n\nview in IGV:\n- transfer aln.bam, aln.bam.bai, contigs.fa, contigs.fa.fai to local computer\n- open IGV\n- File - genomes - load genome from file: contigs\n- File - load from file - aln.bam file\n- select the main chromosome eg tig00000000\n- go to coordinate 2463600\n- there is a dip in coverage here.\n- pilon has identified this as a local misassembly and has deleted this section in the corrected assembly\n\n\n\n\n\n\n\n\noutput:corrected assembly\n\n\n\n\n\n\nre run pilon to correct again.\n\n\n\n\nbut this time, the reference is the first pilon correction\n\n\n\n\n\n\n\n\nbwa index corrected.fasta\nbwa mem -t 8 corrected.fasta R1.fastq.gz R2.fastq.gz | samtools sort \n aln_to_corrected.bam\nsamtools index all_to_corrected.bam\nsamtools faidx corrected.fasta\n\n\n\n\n\n\nseparate into three fasta files\n\n\n\n\nor, use Bowtie for alignment\n\n\nindex the fasta file\n\n\nbowtie2-build all_contigs.fa bowtie\n\n\n\n\ninput file\noutput ref name\n\n\nalign:\n\n\nbowtie2 --end-to-end --threads 72 -x bowtie -1 25745_1_PE_700bp_SEP_UNSW_ARE4E_TCGACGTC_AAGGAGTA_S5_L001_R1.fastq.gz -2 25745_1_PE_700bp_SEP_UNSW_ARE4E_TCGACGTC_AAGGAGTA_S5_L001_R2.fastq.gz | samtools sort \n bowtie2.bam\n\n\n\n\n\n\n\nbowtie\n means use the index files that were generated above that we called bowtie\n\n\nuse 72 threads on mdu but \n8 on sepsis\n\n\nthen index the bam file\n\n\n\n\nsamtools index bowtie2.bam\nsamtools faidx contigs.fasta\n\n\n\n\n\n\nthen view in tview\n\n\n\n\nsamtools tview -p tig00000000:2463600 bowtie2.bam all_contigs.fa\n\n\n\n\nor use BLASR for alignment: pacbio reads to pacbio assembly\n\n\n(in MDU marvin)\n\n\nblasr subreads.fastq all_contigs.fa -nproc 72 -sam | samtools sort \n blasr_aln.bam\n\n\n\n\nblasr subreads.fastq all_contigs.fa -nproc 72 -sam | samtools sort \n blasr_aln.bam\nsamtools index blasr_aln.bam\nsamtools faidx all_contigs.fa\nsamtools tview -p tig00000000:2463600 blasr_aln.bam all_contigs.fa\n\n\nor align pacbio reads to pacbio assembly with bwa mem\n\n\ncanu: pacbio corrected reads\nbwa mem\nalign to pacbio assembly\n\n\nbam index all_contigs.fasta\n\n\nbwa mem -t 72 all_contigs.fa staph.correctedReads.fasta | samtools sort \n pacbio_aln.bam\n\n\n(leave out -x pacbio option as these are corrected reads)\n\n\nExamine 23bp\n\n\nalign corrected pacbio reads to pacbio assembly\n\n\nmake a 23bp seq\n\n\nnano 23bp.fa\n\n\n\n\npaste in the seq\n\n\nSplit into three final contigs\n\n\n\n\nExamine the all_contigs.fa file\n\n\n\n\nfa -f\n\n\n\n\ntig00000000 dna 2725158\ntig00000001 dna 24884\ncontig3b    dna 2252\n\n\n\n\nsplit these\n\n\n\n\nsamtools faidx all_contigs.fa tig00000000: \n chromosome.fa\n\nsamtools faidx all_contigs.fa tig00000001: \n chromosome.fa\n\nsamtools faidx all_contigs.fa contig3b: \n chromosome.fa\n\n\n\n\nCircularise\n\n\ncorrected contigs =\n circlator =\n circular genome (e.g. starting at dnaA)\n\n\nChromosome\n\n\ncirclator fixstart contig.fa outprefix\n\n\n\n\ndefault: orients at DNAa\n\n\n=\n circular, corrected assembly\n\n\nPlasmid 1\n\n\nblast against ncbi\nfind hit\nwhat have they done\ndownload the start of their assembly (may be a gene or may be tandem repeats etc. )\n\n\ncirclator fixstart --genes_fa filename contig outprefix\n\n\n\n\n-or, whatever has been done with the plasmid it most closely blast matches to\neg\n  https://www.ncbi.nlm.nih.gov/nucleotide/260066114?report=genbank\nlog$=nuclalign\nblast_rank=1\nRID=WTK2RJSZ014\n\n\nneed to download\n\n\nPlasmid 2\n\n\nNext\n\n\nAnnotate with prokka\n\n\nLinks\n\n\nCanu manual\n\n\nCanu code\n\n\nPilon article\n\n\nPilon on github\n\n\nCirclator\nhttp://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0849-0\nhttp://sanger-pathogens.github.io/circlator/\n\n\nFinishing\n\n\nhttps://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Finishing-Bacterial-Genomes\n\n\nhttps://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Evaluating-Assemblies\n\n\nFiles\n\n\nreference to bas.h5 files (details) https://s3.amazonaws.com/files.pacb.com/software/instrument/2.0.0/bas.h5+Reference+Guide.pdf", 
            "title": "Assembly and finishing with command line tools"
        }, 
        {
            "location": "/modules/cmdline_assembly/#pacbio-reads-assembly-with-command-line-tools", 
            "text": "This tutorial demonstrates how to use long sequence reads to assemble a bacterial genome.", 
            "title": "PacBio reads: assembly with command line tools"
        }, 
        {
            "location": "/modules/cmdline_assembly/#learning-objectives", 
            "text": "At the end of this tutorial, be able to use command line tools to:   assemble long (PacBio) sequence reads  trim overhang  correct the draft assembly with short (Illumina) reads  circularise the corrected assembly   produce a finished assembly.", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/cmdline_assembly/#input-files", 
            "text": "Open the mGVL command line  Navigate to the directory in which you want to work.  Make a directory called  staph   mkdir staph\ncd staph   Make a subdirectory with the sample name  25745   mkdir 25745\ncd 25745", 
            "title": "Input files"
        }, 
        {
            "location": "/modules/cmdline_assembly/#find-the-pacbio-files-for-this-sample", 
            "text": "Obtain the input files. e.g. from the BPA portal.  PacBio files are often stored in the format:\nSample_name/Cell_name/Analysis_Results/long_file_name_1.fastq.gz  We will use the  fastq.gz  files.  The reads are usually split into three separate files because they are so large.   Right click on the first  subread.fastq.gz  file and  copy link address .    In the command line, type:    wget --user username --password password [paste link URL for file]   repeat for the other two  subread.fastq.gz  files.", 
            "title": "Find the PacBio files for this sample"
        }, 
        {
            "location": "/modules/cmdline_assembly/#join-pacbio-fastq-files", 
            "text": "If the files are gzipped, type:   cat filepath/filep0.*.subreads.fastq.gz   subreads.fastq.gz   If the files are not gzipped, type:   cat filepath/filep0.*.subreads.fastq | gzip   subreads.fastq.gz   We now have a file called  subreads.fastq.gz .", 
            "title": "Join PacBio fastq files"
        }, 
        {
            "location": "/modules/cmdline_assembly/#find-the-illumina-files-for-this-sample", 
            "text": "We will also use 2 x Illumina (Miseq) fastq.gz files.  These are the  R1.fastq.gz  and  R2.fastq.gz  files.  Right click on the file name and  copy link address .  In the command line, type:   wget --user username --password password [paste link URL for file]   Repeat for the other read.fastq.gz file.  Shorten the name of each of these files:   mv longfilename_R1.fastq.gz R1.fastq.gz\nmv longfilename_R2.fastq.gz R2.fastq.gz", 
            "title": "Find the Illumina files for this sample"
        }, 
        {
            "location": "/modules/cmdline_assembly/#view-files", 
            "text": "Type  ls  to display the folder contents.   ls   The 3 files we will use in this analysis are:  subreads.fastq.g  (the PacBio reads)  R1.fastq.gz  and  R2.fastq.gz  (the Illumina reads)", 
            "title": "View files"
        }, 
        {
            "location": "/modules/cmdline_assembly/#assemble-with-canu", 
            "text": "Run canu with these commands:   canu -p staph -d staph_outdir corMhapSensitivity=high corMinCoverage=0 genomeSize=2.8m -pacbio-raw subreads.fastq   staph  is the prefix given to output files  staph_outdir  is the output directory  corMhapSensitivity  and  corMinCoverage  is a recommended option for sensitivity   genomeSize  only has to be approximate. e.g., for staph, 2.8M.    Note: it may say  Finished   but it is probably still running. Type:    squeue    This will show you what is running.    Canu will correct, trim and assemble the reads.   This will take ~ 30 minutes.", 
            "title": "Assemble with Canu"
        }, 
        {
            "location": "/modules/cmdline_assembly/#check-the-output", 
            "text": "cd staph_outdir   The  contigs.fasta  are the assembled sequences.  The  unassembled.fasta  are the reads that could not be assembled.  The  file.gfa  is the graph of the assembly.  Display summary information about the contigs:   fa -f staph.contigs.fasta    There are two contigs. Note down their lengths: 2,725,231 and 43,991  We will split these into two separate fasta files.", 
            "title": "Check the output"
        }, 
        {
            "location": "/modules/cmdline_assembly/#separate-the-contigs-into-single-files", 
            "text": "Index the contigs file:   samtools faidx staph.contigs.fasta    this makes an indexed file with the suffix -fai    send each contig to a new file:    samtools faidx staph.contigs.fasta tig00000000   contig1.fa\nsamtools faidx staph.contigs.fasta tig00000001   contig2.fa   change contig names:   nano filename.fa   change header to contig1 or contig2  save  We now have two files:  contig1.fa  contig2.fa", 
            "title": "Separate the contigs into single files"
        }, 
        {
            "location": "/modules/cmdline_assembly/#alternatives-for-assembly", 
            "text": "canu without sensitivity settings  HGAP2", 
            "title": "Alternatives for assembly"
        }, 
        {
            "location": "/modules/cmdline_assembly/#use-quiverarrow-here", 
            "text": "to correct assembly with the raw reads.", 
            "title": "Use Quiver/Arrow here?"
        }, 
        {
            "location": "/modules/cmdline_assembly/#trim-overhang-in-chromosome-1", 
            "text": "Chromosome 1 is in the  contig1.fa  file.  The canu assembly graph will be split at an ambiguous/unstable node. However, this area of the graph likely overlaps in the bacterial chromosome, but has not aligned with itself completely. This is called an overhang. We need to identify these overhangs and trim them, for the chromosome and any plamsids.   Take the first 30,000 bases of contig1.   head -n 501 contig1.fa   contig1.fa.head   this is the start of the assembly  we want to see if it matches the end (overhang)  format the assembly file for blast:   formatdb -i contig1.fa -p F   blast the start of the assembly (.head file) against all of the assembly:   blastall -p blastn -i contig1.fa.head -d contig1.fa -e 1e-10 -F F -o contig1.bls   look at  contig1.bls  to see hits:   less contig1.bls   The first hit is against the start of the chromosome, as expected.  This position, near the end of the contig, is where the overhang starts: position 2725159     check that this match goes to the end of the contig: 2725231 - yes.  we will now trim the contig  first, index the  contig1.fa  file   samtools faidx contig1.fa   this makes an index file called  contig1.fa.fai  next, extract all the sequence except for the overhang. (We don t have to specify the name of the  index  file; it will be found automatically):   samtools faidx contig1.fa tig00000000:1-2725158   contig1.fa.trimmed   open the  contig1.fa.trimmed  file   nano contig1.fa.trimmed   delete the header info except contig name (e.g. tig00000000)\nexit.  we now have a trimmed contig1.", 
            "title": "Trim overhang in chromosome 1"
        }, 
        {
            "location": "/modules/cmdline_assembly/#investigate-the-plasmid", 
            "text": "Contig 2 is 43,991 bases.  This seems long for a plasmid in this species.  Do a dot plot to examine the sequence.", 
            "title": "Investigate the plasmid"
        }, 
        {
            "location": "/modules/cmdline_assembly/#transfer-file-to-local-computer", 
            "text": "Use Cyberduck to copy  contig2.fa  to your local computer  Install Cyberduck  Open Cyberduck  click on  open connection  choose SFTP from drop down menu  server = your virtual machine IP address (e.g. abrpi.genome.edu.au)  username = your username  password = your password  You should now see a window showing the folders and files on your virtual machine.  You can drag and drop files into the preferred folder.", 
            "title": "Transfer file to local computer"
        }, 
        {
            "location": "/modules/cmdline_assembly/#view-dot-plot", 
            "text": "Install Gepard  Open Gepard  Sequences - sequence 1 - select file -  contig2.fa  Sequences - sequence 2 - select file -  contig2.fa  Create dotplot     the sequence starts to repeat at position ~ 24850  there are probably two plasmids combined into one contig in tandem.  the whole length is 43,991  we will cut 9000 from each end  use samtools to extract the region of the contig except for 9k on each end   samtools faidx contig2.fa\nsamtools faidx contig2.fa tig00000001:9000-35000   contig2.fa.half   we now have a ~ 26000 bases plasmid   nano contig2.fa.half   delete the rest of the name after tig00000001", 
            "title": "View dot plot"
        }, 
        {
            "location": "/modules/cmdline_assembly/#trim-overhang-in-the-plasmid", 
            "text": "contig 2.  Take the first x bases:  head -n 10 contig2.fa.half   contig2.fa.half.head   this is the start of the assembly  we want to see if it matches the end (overhang)  format the assembly file for blast:   formatdb -i contig2.fa.half -p F   blast the start of the assembly against all of the assembly:   blastall -p blastn -i contig2.fa.half.head -d contig2.fa.half -e 1e-3 -F F -o contig2.bls   look at contig2.bls to see hits:   less contig2.bls   The first hit is against the start of the chromosome, as expected.  The last hit starts at position 24885.   We will trim the plasmid to position 24884    first, index the contig2.fa.half file    samtools faidx contig2.fa.half   trim   samtools faidx contig2.fa.half tig00000001:1-24884   contig2.fa.half.trimmed   open the contig2.fa.half.trimmed file   nano contig2.fa.half.trimmed    delete the header info except contig name (e.g. tig00000000)\nexit.    we now have a trimmed contig2.", 
            "title": "Trim overhang in the plasmid"
        }, 
        {
            "location": "/modules/cmdline_assembly/#combine-contigs-1-and-2", 
            "text": "take chr and plasmid =  one fasta file  cat contig1.fa.trimmed contig2.fa.half.trimmed   contig_1_2.fa  fa -f contig_1_2.fa", 
            "title": "Combine contigs 1 and 2"
        }, 
        {
            "location": "/modules/cmdline_assembly/#look-for-smaller-plasmids", 
            "text": "Make directory and move in combined contigs file and the illumina reads   cp contig_1_2.fa ../\n\ncd ..\n\nmkdir find_contig_3\n\ncp contig_1_2.fa R1.fastq.gz R2.fastq.gz find_contig_3/\n\n cd find_contig_3", 
            "title": "Look for smaller plasmids"
        }, 
        {
            "location": "/modules/cmdline_assembly/#align-illumina-with-bwa", 
            "text": "Align illumina reads to these contigs  First, index the contigs file   bwa index contig_1_2.fa   then, align using bwa mem   bwa mem -t 8 contig_1_2.fa R1.fastq.gz R2.fastq.gz | samtools sort   aln.bam   the output alignment is  aln.bam", 
            "title": "Align Illumina with BWA"
        }, 
        {
            "location": "/modules/cmdline_assembly/#or-align-with-bowtie2", 
            "text": "Add info here", 
            "title": "Or align with bowtie2"
        }, 
        {
            "location": "/modules/cmdline_assembly/#extract-unmapped-illlumina-reads", 
            "text": "Index the alignment file   samtools index aln.bam   extract the fastq files from the bam alignment - those reads that were unmapped to the pacbio alignment.   samtools fastq -f 4 -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq aln.bam\n\nls -l # check R1 and R2 are approx same size\n\nhead unmapped.R* #check first reads have same name in R1 and R2\n\nhead unmapped.R1.fastq unmapped.R2.fastq   we now have three files of the unampped reads", 
            "title": "Extract unmapped illlumina reads"
        }, 
        {
            "location": "/modules/cmdline_assembly/#assemble-the-unmapped-reads", 
            "text": "assemble with spades   spades.py -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq -o spades_assembly  -1 is input file forward\n-2 is input file reverse\n-s is unpaired\n-o is output_dir  cd spades_assembly\n\nfa scaffolds.fasta    shows how many assembled:   e.g. no=136  max = 2229     sort fasta by size of seqs:    sizeseq\nInput sequence set: scaffolds.fasta\nReturn longest sequence first [N]: Y\noutput sequence(s) [scaffolds.fasta]: sorted_scaffolds.fasta\ngrep cov sorted_scaffolds.fasta  #just print the first row of each seq to see coverage    result: NODE_1_length_2229_cov_610.033   longest contig is 2229 and high coverage     all the nodes are listed   see if any other ones have high coverage  e.g.  NODE_136_length_78_cov_579    look at the sequence of this contig:   tail sorted_scaffolds.fasta    seq looks bad for node136 so disregard (seq is only Cs)    we will extract the first seq    samtools faidx sorted_scaffolds.fasta\nsamtools faidx sorted_scaffolds.fasta NODE_1_length_2229_cov_610.033   contig3.fa   this is now saved as  contig3.fa", 
            "title": "Assemble the unmapped reads"
        }, 
        {
            "location": "/modules/cmdline_assembly/#investigate-the-small-plasmid-contig3", 
            "text": "blast start of contig3 against itself  Take the first x bases:   head -n 10 contig3.fa   contig3.fa.head   this is the start of the assembly  we want to see if it matches the end (overhang)  format the assembly file for blast:   formatdb -i contig3.fa -p F   blast the start of the assembly against all of the assembly:   blastall -p blastn -i contig3.fa.head -d contig3.fa -e 1e-3 -F F -o contig3.bls   look at contig3.bls to see hits:   less contig3.bls   the first hit is against itself, as expected  there are a few further hits to small sections, but none to the end, so we assume there is no overhang that needs trimming.   however, the sequence is likely then to be longer than this.    copy the sequence:    less contig3.fa   copy the sequence  go to ncbi blast  nuc to protein  paste seq  choose genetic code = 11  blast  hits: replication protein  so this is a protein that has not been found in the pacbio assembly.  hypothesise that  this might be a true small plasmid but the rest of its seq is in common with other parts of the staph genome, so they haven t been assembled with the rep protein", 
            "title": "Investigate the small plasmid (contig3)"
        }, 
        {
            "location": "/modules/cmdline_assembly/#assemble-all-the-illumina-reads", 
            "text": "assemble all the illumina reads with spades (not just those reads unmapped to pacbio assembly)  resulting assembly: search for small plasmid sequence  use spades-fast on MDU server  mkdir  wget illumina reads  run spades-fast:   spades-fast --R1 file --R2 file --gsize 2.8M --outdir spades_fast --cpus 32  cd spades_fast   in here is the  assembly_graph.fastg  use cyberduck to transfer this file to local computer  Examine the assembly in the program Bandage.  Install Bandage.  File: Load graph:  file.gfa  In the left hand panel, click  Draw graph        see: main chromosome, plasmid, small plasmid (annotate pic)    blast the small plasmid sequence in this assembly   left hand panel: Blast: create/view BLAST search  build blast database  paste in nuc seq of contig3   blast    the main hit is around node 10    go to bandage window   find nodes  in right hand panel - 10  this node is slightly longer: 2373  this could be the plasmid  find the sequence: NODE_10  extract this seq  this is called NODE_10 in bandage but in the assembly_graph.fastg file it is called EDGE_10  go to the folder for spades_fast   less contigs.fasta\n/2373   search for length of this node  see that this is actually called NODE_11_length_2373_cov_417.492  extract out node 11   samtools faidx contigs.fasta\nsamtools faidx contigs.fasta NODE_11_length_2373_cov_417.492   contig3b.fa   we will call it contig 3  b  because it is larger than our original contig3.  open it - copy the seq  move this file back to sepsis abrpi machine:  open a nano file: nano contig3a.fa  paste the seq    save", 
            "title": "Assemble all the illumina reads"
        }, 
        {
            "location": "/modules/cmdline_assembly/#trim-small-plasmid", 
            "text": "next: check for overhang  Take the first x bases:   head -n 10 contig3b.fa   contig3b.fa.head   this is the start of the assembly  we want to see if it matches the end (overhang)  format the assembly file for blast:   formatdb -i contig3b.fa -p F   blast the start of the assembly against all of the assembly:   blastall -p blastn -i contig3b.fa.head -d contig3b.fa -e 1e-3 -F F -o contig3b.bls   look at contig3b.bls to see hits:   less contig3b.bls   The first hit is against the start of the chromosome, as expected.  The last hit starts at position 2253  We will trim the plasmid to position 2252  first, index the contig3b.fa file   samtools faidx contig3b.fa   trim   samtools faidx contig3b.fa contig3b:1-2252   contig3b.fa.trimmed   open the contig3b.fa.trimmed   nano contig3b.fa.trimmed   delete the header info except contig name (e.g. contig3b)\nexit.  we now have a trimmed contig3b.", 
            "title": "Trim small plasmid"
        }, 
        {
            "location": "/modules/cmdline_assembly/#collect-all-contigs-in-one-file", 
            "text": "move up to main analysis folder  mkdir pilon  copy the trimmed contigs 1, 2, 3b into this folder  cat them   cat contig_1_2.fa contig3b.fa.trimmed   all_contigs.fa\n\nfa -f all_contigs.fa   see the three contigs and sizes  rename all the contigs  contig1  contig2  contig3b", 
            "title": "Collect all contigs in one file"
        }, 
        {
            "location": "/modules/cmdline_assembly/#correct-with-pilon", 
            "text": "Canu doesn t do any polishing, so there will be thousands of errors, almost all insertions.  We will use the illumina reads to correct the pacbio assembly.    inputs:   draft pacbio assembly (overhang trimmed from each of the three replicons)  illumina reads (aligned to pacbio assembly: in bam format)     output: corrected assembly", 
            "title": "Correct with Pilon"
        }, 
        {
            "location": "/modules/cmdline_assembly/#align-illumina-reads-bam", 
            "text": "might have already been done above   bwa index contigs.fasta\nbwa mem -t 8 contigs.fasta r1s r2s | samtools sort   aln.bam\nsamtools index aln.bam\nsamtools faidx contigs.fasta   -t is the number of cores (e.g. 8)  to find out how many you have, grep -c processor /proc/cpuinfo", 
            "title": "Align Illumina reads =&gt; bam"
        }, 
        {
            "location": "/modules/cmdline_assembly/#correct", 
            "text": "run pilon:   pilon --genome all_contigs.fa --frags all_aln.bam --output corrected --fix bases --changes --threads 8 --verbose   look at the output file called .pilon.fasta  compared to input file, this one could be longer    look at the changes file   less corrected.changes   a lot are single, but there are some bigger ones.  e.g. at position 2,463,699 there is a 23-bp seq that is deleted.", 
            "title": "Correct"
        }, 
        {
            "location": "/modules/cmdline_assembly/#view-the-deletion-in-a-pileup", 
            "text": "tig00000000:2463600-2463622 tig00000000_pilon:2463699 GTTAAAGGTTATTTGAATGATCA .   view the illumina reads mapped against the original assembly:   samtools tview -p tig00000000:2463600 aln.bam all_contigs.fa   -p gives the chromosome position that we want to view  then input file; then reference file   view:\n- reference sequence along the top\n- then consensus from the aligned illumina reads\n- a dot is a match on F\n- a comma is a match on R\n- capital letter is a correction on F\n- small letter is a correction on R\n- asterisk\n- underlining  view in IGV:\n- transfer aln.bam, aln.bam.bai, contigs.fa, contigs.fa.fai to local computer\n- open IGV\n- File - genomes - load genome from file: contigs\n- File - load from file - aln.bam file\n- select the main chromosome eg tig00000000\n- go to coordinate 2463600\n- there is a dip in coverage here.\n- pilon has identified this as a local misassembly and has deleted this section in the corrected assembly     output:corrected assembly    re run pilon to correct again.   but this time, the reference is the first pilon correction     bwa index corrected.fasta\nbwa mem -t 8 corrected.fasta R1.fastq.gz R2.fastq.gz | samtools sort   aln_to_corrected.bam\nsamtools index all_to_corrected.bam\nsamtools faidx corrected.fasta   separate into three fasta files", 
            "title": "View the deletion in a pileup"
        }, 
        {
            "location": "/modules/cmdline_assembly/#or-use-bowtie-for-alignment", 
            "text": "index the fasta file  bowtie2-build all_contigs.fa bowtie  input file\noutput ref name  align:  bowtie2 --end-to-end --threads 72 -x bowtie -1 25745_1_PE_700bp_SEP_UNSW_ARE4E_TCGACGTC_AAGGAGTA_S5_L001_R1.fastq.gz -2 25745_1_PE_700bp_SEP_UNSW_ARE4E_TCGACGTC_AAGGAGTA_S5_L001_R2.fastq.gz | samtools sort   bowtie2.bam   bowtie  means use the index files that were generated above that we called bowtie  use 72 threads on mdu but  8 on sepsis  then index the bam file   samtools index bowtie2.bam\nsamtools faidx contigs.fasta   then view in tview   samtools tview -p tig00000000:2463600 bowtie2.bam all_contigs.fa", 
            "title": "or, use Bowtie for alignment"
        }, 
        {
            "location": "/modules/cmdline_assembly/#or-use-blasr-for-alignment-pacbio-reads-to-pacbio-assembly", 
            "text": "(in MDU marvin)  blasr subreads.fastq all_contigs.fa -nproc 72 -sam | samtools sort   blasr_aln.bam  blasr subreads.fastq all_contigs.fa -nproc 72 -sam | samtools sort   blasr_aln.bam\nsamtools index blasr_aln.bam\nsamtools faidx all_contigs.fa\nsamtools tview -p tig00000000:2463600 blasr_aln.bam all_contigs.fa", 
            "title": "or use BLASR for alignment: pacbio reads to pacbio assembly"
        }, 
        {
            "location": "/modules/cmdline_assembly/#or-align-pacbio-reads-to-pacbio-assembly-with-bwa-mem", 
            "text": "canu: pacbio corrected reads\nbwa mem\nalign to pacbio assembly  bam index all_contigs.fasta  bwa mem -t 72 all_contigs.fa staph.correctedReads.fasta | samtools sort   pacbio_aln.bam  (leave out -x pacbio option as these are corrected reads)", 
            "title": "or align pacbio reads to pacbio assembly with bwa mem"
        }, 
        {
            "location": "/modules/cmdline_assembly/#examine-23bp", 
            "text": "align corrected pacbio reads to pacbio assembly  make a 23bp seq  nano 23bp.fa  paste in the seq", 
            "title": "Examine 23bp"
        }, 
        {
            "location": "/modules/cmdline_assembly/#split-into-three-final-contigs", 
            "text": "Examine the all_contigs.fa file   fa -f  tig00000000 dna 2725158\ntig00000001 dna 24884\ncontig3b    dna 2252   split these   samtools faidx all_contigs.fa tig00000000:   chromosome.fa\n\nsamtools faidx all_contigs.fa tig00000001:   chromosome.fa\n\nsamtools faidx all_contigs.fa contig3b:   chromosome.fa", 
            "title": "Split into three final contigs"
        }, 
        {
            "location": "/modules/cmdline_assembly/#circularise", 
            "text": "corrected contigs =  circlator =  circular genome (e.g. starting at dnaA)", 
            "title": "Circularise"
        }, 
        {
            "location": "/modules/cmdline_assembly/#chromosome", 
            "text": "circlator fixstart contig.fa outprefix  default: orients at DNAa  =  circular, corrected assembly", 
            "title": "Chromosome"
        }, 
        {
            "location": "/modules/cmdline_assembly/#plasmid-1", 
            "text": "blast against ncbi\nfind hit\nwhat have they done\ndownload the start of their assembly (may be a gene or may be tandem repeats etc. )  circlator fixstart --genes_fa filename contig outprefix  -or, whatever has been done with the plasmid it most closely blast matches to\neg\n  https://www.ncbi.nlm.nih.gov/nucleotide/260066114?report=genbank log$=nuclalign blast_rank=1 RID=WTK2RJSZ014  need to download", 
            "title": "Plasmid 1"
        }, 
        {
            "location": "/modules/cmdline_assembly/#plasmid-2", 
            "text": "", 
            "title": "Plasmid 2"
        }, 
        {
            "location": "/modules/cmdline_assembly/#next", 
            "text": "Annotate with prokka", 
            "title": "Next"
        }, 
        {
            "location": "/modules/cmdline_assembly/#links", 
            "text": "Canu manual  Canu code  Pilon article  Pilon on github  Circlator\nhttp://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0849-0\nhttp://sanger-pathogens.github.io/circlator/  Finishing  https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Finishing-Bacterial-Genomes  https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Evaluating-Assemblies  Files  reference to bas.h5 files (details) https://s3.amazonaws.com/files.pacb.com/software/instrument/2.0.0/bas.h5+Reference+Guide.pdf", 
            "title": "Links"
        }, 
        {
            "location": "/modules/cmdline_prokka/", 
            "text": "Genome annotation using Prokka on the command line\n\n\nBackground\n\n\nIn this section we will use a software tool called Prokka to annotate a bacterial genome assembly.\n\n\nProkka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.\n\n\nProkka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using \nProdigal\n; second, the \nfunction\n of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found \nhere\n.\n\n\nLearning objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nload a genome assembly into Prokka\n\n\nannotate the assembly using Prokka\n\n\nexamine the annotated genome using Artemis\n\n\n\n\nInput data\n\n\nProkka requires assembled contigs.\n\n\n\n\nDownload the assembled contigs from [tba]\n\n\n\n\nOpen the GVL command line\n\n\n\n\ngo to GVL dashboard - go to SSH - find name of virtual machine\n\n\non local machine, open terminal (or equivalent)\n\n\nssh to your GVL\n\n\n\n\nprokka --outdir mydir --prefix staph contigs.fa\n\n\n\n\noutput:\n- 10 files\n\n\nprokka will save the output in \nmydir\n\n\nmove there:\n\n\ncd mydir\n\n\n\n\nlook at the text file:\n\n\ncat file.txt   [check name]\n\n\n\n\nlook at [screenshot]\n\n\nlook at the annotations in artemis:\n\n\nart mydir/staph.gff\n\n\n\n\nlook at [screenshot]", 
            "title": "Annotation using command line tools"
        }, 
        {
            "location": "/modules/cmdline_prokka/#genome-annotation-using-prokka-on-the-command-line", 
            "text": "", 
            "title": "Genome annotation using Prokka on the command line"
        }, 
        {
            "location": "/modules/cmdline_prokka/#background", 
            "text": "In this section we will use a software tool called Prokka to annotate a bacterial genome assembly.  Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.  Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using  Prodigal ; second, the  function  of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found  here .", 
            "title": "Background"
        }, 
        {
            "location": "/modules/cmdline_prokka/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   load a genome assembly into Prokka  annotate the assembly using Prokka  examine the annotated genome using Artemis", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/modules/cmdline_prokka/#input-data", 
            "text": "Prokka requires assembled contigs.   Download the assembled contigs from [tba]", 
            "title": "Input data"
        }, 
        {
            "location": "/modules/cmdline_prokka/#open-the-gvl-command-line", 
            "text": "go to GVL dashboard - go to SSH - find name of virtual machine  on local machine, open terminal (or equivalent)  ssh to your GVL   prokka --outdir mydir --prefix staph contigs.fa  output:\n- 10 files  prokka will save the output in  mydir  move there:  cd mydir  look at the text file:  cat file.txt   [check name]  look at [screenshot]  look at the annotations in artemis:  art mydir/staph.gff  look at [screenshot]", 
            "title": "Open the GVL command line"
        }, 
        {
            "location": "/modules/dge/", 
            "text": "Differential Gene Expression\n\n\nThis tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).\n\n\n\n\n\nBackground\n\n\nDifferential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.\n\n\nLearning Objectives\n\n\nAt the end of this tutorial you should be able to:\n\n\n\n\nAlign RNA-Seq data to a reference genome  \n\n\nCount transcripts for each sample\n\n\nPerform statistical analysis to obtain a list of differentially expressed genes\n\n\nVisualize and interpret the results\n\n\n\n\nInput data: reads and reference\n\n\nRNA-Seq reads\n\n\nA typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.\n\n\n\n\nOur RNA-seq reads are from 6 samples in \nFASTQ\n format.\n\n\nWe have single-end reads; so one file per sample.\n\n\nData could also be paired-end reads, and there would be two files per sample.\n\n\n\n\n\n\nThese have been reduced to 1% of their original size for this tutorial.\n\n\nThe experiment used the bacteria \nE. coli\n grown in two conditions.\n\n\nFiles labelled \nLB\n are the wildtype\n\n\nFiles labelled \nMG\n have been exposed to 0.5% \nMG - alpha methyglucoside (a sugar solution).\n\n\n\n\n\n\n\n\n\n\n\nReference genome\n\n\nThe reference genomes is in \nFASTA\n format and the gene annotations are in \nGTF\n format.\n\n\n\n\nThe \nFASTA\n file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids.\n\n\nThe \nGTF\n file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences.\n\n\n\n\n\n\n\nUpload files to Galaxy\n\n\n\n\nLog in to your Galaxy server.\n\n\nIn the \nHistory\n pane, click on the cog\nicon, and select \nImport from File\n (at the bottom of the list).\n\n\nUnder \nArchived History URL\n paste:\n\nhttps://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz\n\n\nIn the \nHistory\n pane, click on the view\nicon and find the uploaded history.\n\n\n(This may take a minute. Refresh the page.)\n\n\n\n\n\n\nClick \nSwitch to\n that history, then \nDone\n.\n\n\nThe files should now be ready to use in your current History pane.\n\n\n\n\n\n\nAlign reads to reference\n\n\nThe RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome.\n\n\nIn Galaxy:\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: Mapping \n Map with BWA-MEM\n\n\nUnder \nWill you select a reference genome from your history or use a built-in index?\n: \nUse a genome from history and build index\n\n\nUse the following dataset as the reference sequence\n: \nEcoli_k12.fasta\n\n\nSingle or Paired-end reads\n: \nsingle\n\n\nSelect fastq dataset\n:\n\n\nClick on the \nMultiple Datasets\n icon in centre\n\n\nSelect all 6 \nFASTQ\n files (they turn blue; use side-scroll bar to check all have been selected)\n\n\nThis will map each set of reads to the reference genome\n\n\n\n\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n\n\nClick \nRefresh\n in the history pane to see if the analysis has finished.\n\n\n\n\nOutput: 6 \nbam\n files of reads mapped to the reference genome.\n\n\n\n\n\n\nRe-name the output files:\n\n\n\n\nThese are called \nMap with BWA-MEM on data x and data x\n.\n\n\nClick on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.).\n\n\nClick \nSave\n.\n\n\n\n\n\n\n\n\nCount reads per gene\n\n\nWe now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file.\n\n\nIn Galaxy:\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: RNA Analysis \n SAM/BAM to count matrix\n.\n\n\nNote: Don\nt select the tool called \nhtseq-count\n. The \nSAM/BAM to count matrix\n also uses that tool but allows an input of multiple bam files, which is what we want.\n\n\n\n\n\n\nFor \nGene model (GFF) file to count reads over from your current history\n, select the \nGTF\n file.\n\n\nFor \nReads are stranded\n select \nYes\n (box turns dark grey)\n\n\nFor \nGTF feature type for counting reads\n select \ntranscript\n.\n\n\nFor \nbam/sam file from your history\n choose the 6 \nbam\n files.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n\n\nClick \nRefresh\n in the history pane to see if the analysis has finished.\n\n\n\n\nOutput:\n\n\n\n\nThere is one output file: \nbams to DGE count matrix\n.\n\n\nClick on the file name to expand the information in the History pane.\n\n\nClick on the file \nicon underneath to download it to your computer for use later on in this tutorial.\n\n\nClick on the eye icon to see this file.\n\n\n\n\n\n\n\n\nEach row is a gene (or feature) and each column is a sample, with counts against each gene.\n\n\nHave a look at how the counts vary between samples, per gene.\n\n\nWe can\nt just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.\n\n\n\n\nDGE in Degust\n\n\nDegust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.\n\n\n(Degust can also display the results from DGE analyses performed elsewhere.)\n\n\nUpload counts file\n\n\nGo to the \nDegust web page\n. Click \nGet Started\n.\n\n\n\n\n\n\nClick on \nChoose File\n.\n\n\nSelect the \nhtseq output file. tabular\n (that you previously downloaded to your computer from Galaxy) and click \nOpen\n.\n\n\nClick \nUpload\n.\n\n\n\n\nA Configuation page will appear.\n\n\n\n\nFor \nName\n type \nDGE in E coli\n\n\nFor \nInfo columns\n select \nContig\n\n\nFor \nAnalyze server side\n leave box checked.\n\n\nFor \nMin read count\n put \n10\n.\n\n\nClick \nAdd condition\n\n\nAdd a condition called \nControl\n and select the LB columns.\n\n\nAdd a condition called \nTreament\n and select the MG columns.\n\n\n\n\n\n\n\n\nYour Configuration page should look like this:\n\n\n\n\n\n\nSave changes\n\n\nView\n - this brings up the Degust viewing window.\n\n\n\n\nOverview of Degust sections\n\n\n\n\nTop black panel with \nConfigure\n settings at right.\n\n\nLeft: Conditions: Control and Treatment.\n\n\nLeft: Method selection for DGE.\n\n\nTop centre: Plots, with options at right.\n\n\nWhen either of the expression plots are selected, a heatmap appears below.\n\n\nA table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).  \n\n\n\n\n\n\nAnalyze gene expression\n\n\n\n\nUnder \nMethod\n, make sure that \nVoom/Limma\n is selected.\n\n\nClick \nApply\n. This runs Voom/Limma on the uploaded counts.\n\n\n\n\nMDS plot\n\n\nFirst, look at the MDS plot.\n\n\n\n\n\n\nThis is a multidimensional scaling plot which represents the variation between samples.\n\n\nIdeally:\n\n\nAll the LB samples would be close to each other\n\n\nAll the MG samples would be close to each other\n\n\nThe LB and MG groups would be far apart\n\n\n\n\n\n\nThe x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.\n\n\nOur LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.\n\n\n\n\nExpression - MA plot\n\n\nEach dot shows the change in expression in one gene.\n\n\n\n\nThe average expression (over both condition and treatment samples) is represented on the x-axis.\n\n\nPlot points should be symmetrical around the x-axis.\n\n\nWe can see that many genes are expressed at a low level, and some are highly expressed.\n\n\n\n\n\n\nThe fold change is represented on the y axis.\n\n\nIf expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR \n0.05).\n\n\nAt low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.\n\n\n\n\n\n\n\n\nClick on the dot to see the gene name.     \n\n\n\n\nExpression - Parallel Coordinates and heatmap\n\n\nEach line shows the change in expression in one gene, between control and treatment.\n\n\n\n\nGo to \nOptions\n at the right.\n\n\nFor \nFDR cut-off\n set at 0.001.\n\n\nThis is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.\n\n\n\n\n\n\n\n\nLook at the Parallel Coordinates plot. There are two axes:\n\n\n\n\nLeft: \nControl\n: Gene expression in the control samples. All values are set at zero.\n\n\nRight: \nTreatment\n Gene expression in the treatment samples, relative to expression in the control.\n\n\n\n\n\n\n\n\nThe blocks of blue and red underneath the plot are called a heatmap.\n\n\n\n\nEach block is a gene. Click on a block to see its line in the plot above.\n\n\nLook at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nfor an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).\n\n\n\n\nTable of genes\n\n\n\n\nContig\n: names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).\n\n\nFDR\n: False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.\n\n\nControl\n and \nTreatment\n: log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the \nControl\n column are zero. This can be changed in the \nOptions\n panel at the top right.\n\n\nIn some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.\n\n\n\n\nTable of genes and expression:\n\n\n\n\n\n\n\nDGE in Galaxy\n\n\nDifferential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above: \nCount reads per gene\n).\n\n\n\n\nGo to \nTools \n NGS Analysis \n NGS: RNA Analysis \n Differential Count models\n\n\nThis has options to use edgeR, DESeq, or Voom. Here we will use Voom.\n\n\n\n\n\n\nFor \nSelect an input matrix\n choose the \ncount matrix\n file generated in the previous step.\n\n\nFor \nTitle for job outputs\n enter \nDGE using voom\n.\n\n\nFor \nSelect columns containing treatment\n tick boxes for the MG samples.\n\n\nFor \nSelect columns containing control\n tick boxes for the LB samples.\n\n\nUnder \nRun this model using edgeR\n choose \nDo not run edgeR\n.\n\n\nUnder \nRun the same model with DESeq2 and compare findings\n choose \nDo not run DESeq2\n.\n\n\nUnder \nRun the same model with Voom/limma and compare findings\n choose \nRun VOOM\n.\n\n\n\n\nYour tool interface should look like this:\n\n\n\n\n\n\nClick \nExecute\n.\n\n\n\n\nThere are two output files.\n\n\nView the file called \nDGEusingvoom.html\n.\n\n\n\n\nScroll down to \nVOOM log output\n and \n#VOOM top 50\n.\n\n\nThe \nContig\n column has the gene names.\n\n\nLook at the \nadj.P.Val\n column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column.\n\n\nLook at the \nlogFC\n column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples.\n\n\n\n\nView the file called \nDEGusingvoom_topTable_VOOM.xls\n.\n\n\n\n\nThis is a list of all the genes that had transcripts mapped, and associated statistics.\n\n\n\n\nWhat next?\n\n\nTo learn more about the differentially-expressed genes:\n\n\n\n\nGo to \nthe NCBI website.\n\n\nUnder \nAll Databases\n, click on \nGene\n\n\nEnter the gene name in the search bar; e.g. ptsG\n\n\nClick on the first result that matches the species (e.g. in this case, \nE. coli\n).\n\n\nThis provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).\n\n\n\n\n\n\n\n\nSome of the most (statistically) significant differentially-expressed genes in this experiment are:\n\n\n\n\nptsG\n: a glucose-specific transporter.\n\n\nsetA\n: a sugar efflux transporter; is induced by glucose-phosphate stress.\n\n\nsucD\n: the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production.\n\n\nsucB\n: a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle.\n\n\ndeoC\n: 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport.\n\n\n\n\nNext steps: Investigate the biochemical pathways involving the genes of interest, using resources such as:\n\n\n\n\nKEGG pathways\n\n\nGene Set Enrichment Analysis\n\n\n\n\nMore information\n\n\n\n\nLink to Degust.\n\n\nLink to Voom paper.", 
            "title": "Differential gene expression"
        }, 
        {
            "location": "/modules/dge/#differential-gene-expression", 
            "text": "This tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).", 
            "title": "Differential Gene Expression"
        }, 
        {
            "location": "/modules/dge/#background", 
            "text": "Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.", 
            "title": "Background"
        }, 
        {
            "location": "/modules/dge/#learning-objectives", 
            "text": "At the end of this tutorial you should be able to:   Align RNA-Seq data to a reference genome    Count transcripts for each sample  Perform statistical analysis to obtain a list of differentially expressed genes  Visualize and interpret the results", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/modules/dge/#input-data-reads-and-reference", 
            "text": "RNA-Seq reads  A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.   Our RNA-seq reads are from 6 samples in  FASTQ  format.  We have single-end reads; so one file per sample.  Data could also be paired-end reads, and there would be two files per sample.    These have been reduced to 1% of their original size for this tutorial.  The experiment used the bacteria  E. coli  grown in two conditions.  Files labelled  LB  are the wildtype  Files labelled  MG  have been exposed to 0.5%  MG - alpha methyglucoside (a sugar solution).      Reference genome  The reference genomes is in  FASTA  format and the gene annotations are in  GTF  format.   The  FASTA  file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids.  The  GTF  file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences.    Upload files to Galaxy   Log in to your Galaxy server.  In the  History  pane, click on the cog icon, and select  Import from File  (at the bottom of the list).  Under  Archived History URL  paste: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz  In the  History  pane, click on the view icon and find the uploaded history.  (This may take a minute. Refresh the page.)    Click  Switch to  that history, then  Done .  The files should now be ready to use in your current History pane.", 
            "title": "Input data: reads and reference"
        }, 
        {
            "location": "/modules/dge/#align-reads-to-reference", 
            "text": "The RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome.  In Galaxy:   Go to  Tools   NGS Analysis   NGS: Mapping   Map with BWA-MEM  Under  Will you select a reference genome from your history or use a built-in index? :  Use a genome from history and build index  Use the following dataset as the reference sequence :  Ecoli_k12.fasta  Single or Paired-end reads :  single  Select fastq dataset :  Click on the  Multiple Datasets  icon in centre  Select all 6  FASTQ  files (they turn blue; use side-scroll bar to check all have been selected)  This will map each set of reads to the reference genome     Your tool interface should look like this:    Click  Execute  Click  Refresh  in the history pane to see if the analysis has finished.   Output: 6  bam  files of reads mapped to the reference genome.    Re-name the output files:   These are called  Map with BWA-MEM on data x and data x .  Click on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.).  Click  Save .", 
            "title": "Align reads to reference"
        }, 
        {
            "location": "/modules/dge/#count-reads-per-gene", 
            "text": "We now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file.  In Galaxy:   Go to  Tools   NGS Analysis   NGS: RNA Analysis   SAM/BAM to count matrix .  Note: Don t select the tool called  htseq-count . The  SAM/BAM to count matrix  also uses that tool but allows an input of multiple bam files, which is what we want.    For  Gene model (GFF) file to count reads over from your current history , select the  GTF  file.  For  Reads are stranded  select  Yes  (box turns dark grey)  For  GTF feature type for counting reads  select  transcript .  For  bam/sam file from your history  choose the 6  bam  files.   Your tool interface should look like this:    Click  Execute  Click  Refresh  in the history pane to see if the analysis has finished.   Output:   There is one output file:  bams to DGE count matrix .  Click on the file name to expand the information in the History pane.  Click on the file  icon underneath to download it to your computer for use later on in this tutorial.  Click on the eye icon to see this file.     Each row is a gene (or feature) and each column is a sample, with counts against each gene.  Have a look at how the counts vary between samples, per gene.  We can t just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.", 
            "title": "Count reads per gene"
        }, 
        {
            "location": "/modules/dge/#dge-in-degust", 
            "text": "Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.  (Degust can also display the results from DGE analyses performed elsewhere.)", 
            "title": "DGE in Degust"
        }, 
        {
            "location": "/modules/dge/#upload-counts-file", 
            "text": "Go to the  Degust web page . Click  Get Started .    Click on  Choose File .  Select the  htseq output file. tabular  (that you previously downloaded to your computer from Galaxy) and click  Open .  Click  Upload .   A Configuation page will appear.   For  Name  type  DGE in E coli  For  Info columns  select  Contig  For  Analyze server side  leave box checked.  For  Min read count  put  10 .  Click  Add condition  Add a condition called  Control  and select the LB columns.  Add a condition called  Treament  and select the MG columns.     Your Configuration page should look like this:    Save changes  View  - this brings up the Degust viewing window.", 
            "title": "Upload counts file"
        }, 
        {
            "location": "/modules/dge/#overview-of-degust-sections", 
            "text": "Top black panel with  Configure  settings at right.  Left: Conditions: Control and Treatment.  Left: Method selection for DGE.  Top centre: Plots, with options at right.  When either of the expression plots are selected, a heatmap appears below.  A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).", 
            "title": "Overview of Degust sections"
        }, 
        {
            "location": "/modules/dge/#analyze-gene-expression", 
            "text": "Under  Method , make sure that  Voom/Limma  is selected.  Click  Apply . This runs Voom/Limma on the uploaded counts.", 
            "title": "Analyze gene expression"
        }, 
        {
            "location": "/modules/dge/#mds-plot", 
            "text": "First, look at the MDS plot.    This is a multidimensional scaling plot which represents the variation between samples.  Ideally:  All the LB samples would be close to each other  All the MG samples would be close to each other  The LB and MG groups would be far apart    The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.  Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.", 
            "title": "MDS plot"
        }, 
        {
            "location": "/modules/dge/#expression-ma-plot", 
            "text": "Each dot shows the change in expression in one gene.   The average expression (over both condition and treatment samples) is represented on the x-axis.  Plot points should be symmetrical around the x-axis.  We can see that many genes are expressed at a low level, and some are highly expressed.    The fold change is represented on the y axis.  If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR  0.05).  At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.     Click on the dot to see the gene name.", 
            "title": "Expression - MA plot"
        }, 
        {
            "location": "/modules/dge/#expression-parallel-coordinates-and-heatmap", 
            "text": "Each line shows the change in expression in one gene, between control and treatment.   Go to  Options  at the right.  For  FDR cut-off  set at 0.001.  This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.     Look at the Parallel Coordinates plot. There are two axes:   Left:  Control : Gene expression in the control samples. All values are set at zero.  Right:  Treatment  Gene expression in the treatment samples, relative to expression in the control.     The blocks of blue and red underneath the plot are called a heatmap.   Each block is a gene. Click on a block to see its line in the plot above.  Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.      Note:   for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).", 
            "title": "Expression - Parallel Coordinates and heatmap"
        }, 
        {
            "location": "/modules/dge/#table-of-genes", 
            "text": "Contig : names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).  FDR : False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.  Control  and  Treatment : log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the  Control  column are zero. This can be changed in the  Options  panel at the top right.  In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.   Table of genes and expression:", 
            "title": "Table of genes"
        }, 
        {
            "location": "/modules/dge/#dge-in-galaxy", 
            "text": "Differential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above:  Count reads per gene ).   Go to  Tools   NGS Analysis   NGS: RNA Analysis   Differential Count models  This has options to use edgeR, DESeq, or Voom. Here we will use Voom.    For  Select an input matrix  choose the  count matrix  file generated in the previous step.  For  Title for job outputs  enter  DGE using voom .  For  Select columns containing treatment  tick boxes for the MG samples.  For  Select columns containing control  tick boxes for the LB samples.  Under  Run this model using edgeR  choose  Do not run edgeR .  Under  Run the same model with DESeq2 and compare findings  choose  Do not run DESeq2 .  Under  Run the same model with Voom/limma and compare findings  choose  Run VOOM .   Your tool interface should look like this:    Click  Execute .   There are two output files.  View the file called  DGEusingvoom.html .   Scroll down to  VOOM log output  and  #VOOM top 50 .  The  Contig  column has the gene names.  Look at the  adj.P.Val  column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column.  Look at the  logFC  column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples.   View the file called  DEGusingvoom_topTable_VOOM.xls .   This is a list of all the genes that had transcripts mapped, and associated statistics.", 
            "title": "DGE in Galaxy"
        }, 
        {
            "location": "/modules/dge/#what-next", 
            "text": "To learn more about the differentially-expressed genes:   Go to  the NCBI website.  Under  All Databases , click on  Gene  Enter the gene name in the search bar; e.g. ptsG  Click on the first result that matches the species (e.g. in this case,  E. coli ).  This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).     Some of the most (statistically) significant differentially-expressed genes in this experiment are:   ptsG : a glucose-specific transporter.  setA : a sugar efflux transporter; is induced by glucose-phosphate stress.  sucD : the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production.  sucB : a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle.  deoC : 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport.   Next steps: Investigate the biochemical pathways involving the genes of interest, using resources such as:   KEGG pathways  Gene Set Enrichment Analysis", 
            "title": "What next?"
        }, 
        {
            "location": "/modules/dge/#more-information", 
            "text": "Link to Degust.  Link to Voom paper.", 
            "title": "More information"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\nThe Food and Health Flagship is an RDS-funded project to provide cloud-based data services and tools\nfor Australian Life Science Researchers to combine, analyse and interpret\ngenomic, transcriptomic, proteomic and metabolomic data. The data platform will incorporate the Bioplatforms Australia Antibiotic Resistant Pathogens Initiative (ABRPI).\n\n\nAuthors\n\n\n Anna Syme\n\n\n Torsten Seemann\n\n\n Simon Gladman\n\n\n Dieter Bulach\n\n\nSupport\n\n\n\n\nResearch Data Services\n\n\nBioplatforms Australia\n\n\nNectar\n\n\n\n\n\n\nThese training materials have been used for:\n\n\nMcGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada\n\n\n\n\n\n\nGalaxy Community Conference 2016, Indiana, USA\n\n\n\n\n\n\nCLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016", 
            "title": "About"
        }, 
        {
            "location": "/about/#about", 
            "text": "The Food and Health Flagship is an RDS-funded project to provide cloud-based data services and tools\nfor Australian Life Science Researchers to combine, analyse and interpret\ngenomic, transcriptomic, proteomic and metabolomic data. The data platform will incorporate the Bioplatforms Australia Antibiotic Resistant Pathogens Initiative (ABRPI).", 
            "title": "About"
        }, 
        {
            "location": "/about/#authors", 
            "text": "Anna Syme   Torsten Seemann   Simon Gladman   Dieter Bulach", 
            "title": "Authors"
        }, 
        {
            "location": "/about/#support", 
            "text": "Research Data Services  Bioplatforms Australia  Nectar    These training materials have been used for:  McGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada    Galaxy Community Conference 2016, Indiana, USA    CLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016", 
            "title": "Support"
        }
    ]
}